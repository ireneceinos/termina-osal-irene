
FreeRTOS_TerminaOSALTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003278  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003408  08003408  00004408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003458  08003458  0000501c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003458  08003458  0000501c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003458  08003458  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003458  08003458  00004458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800345c  0800345c  0000445c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003460  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000501c  2**0
                  CONTENTS
 10 .bss          00005568  2000001c  2000001c  0000501c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005584  20005584  0000501c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 13 .debug_line   000140fb  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000007b  00000000  00000000  00019147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0000dd0c  00000000  00000000  000191c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000289d  00000000  00000000  00026ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000010a8  00000000  00000000  00029770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc12f  00000000  00000000  0002a818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000cb7  00000000  00000000  000f6947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002135a  00000000  00000000  000f75fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00118958  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004360  00000000  00000000  0011899c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080033f0 	.word	0x080033f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080033f0 	.word	0x080033f0

080001d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80001d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000208 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80001d4:	f000 f9de 	bl	8000594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001d8:	480c      	ldr	r0, [pc, #48]	@ (800020c <LoopForever+0x6>)
  ldr r1, =_edata
 80001da:	490d      	ldr	r1, [pc, #52]	@ (8000210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000214 <LoopForever+0xe>)
  movs r3, #0
 80001de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001e0:	e002      	b.n	80001e8 <LoopCopyDataInit>

080001e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001e6:	3304      	adds	r3, #4

080001e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001ec:	d3f9      	bcc.n	80001e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001f0:	4c0a      	ldr	r4, [pc, #40]	@ (800021c <LoopForever+0x16>)
  movs r3, #0
 80001f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001f4:	e001      	b.n	80001fa <LoopFillZerobss>

080001f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001f8:	3204      	adds	r2, #4

080001fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001fc:	d3fb      	bcc.n	80001f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80001fe:	f003 f8d3 	bl	80033a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000202:	f000 f831 	bl	8000268 <main>

08000206 <LoopForever>:

LoopForever:
    b LoopForever
 8000206:	e7fe      	b.n	8000206 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000208:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800020c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000210:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000214:	08003460 	.word	0x08003460
  ldr r2, =_sbss
 8000218:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800021c:	20005584 	.word	0x20005584

08000220 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000220:	e7fe      	b.n	8000220 <ADC1_IRQHandler>

08000222 <task0>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

// TASK FOR THE TEST
void task0(void * const arg) {
 8000222:	b580      	push	{r7, lr}
 8000224:	b084      	sub	sp, #16
 8000226:	af00      	add	r7, sp, #0
 8000228:	6078      	str	r0, [r7, #4]

		uint32_t count = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]
		//(void) argument;

		for (;;)
		{
			count = osKernelSysTick() + 5000;
 800022e:	f001 fd94 	bl	8001d5a <osKernelSysTick>
 8000232:	4603      	mov	r3, r0
 8000234:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8000238:	3308      	adds	r3, #8
 800023a:	60fb      	str	r3, [r7, #12]


			/* Turn on LED3 */
			BSP_LED_On(LED3);
 800023c:	2000      	movs	r0, #0
 800023e:	f000 f96d 	bl	800051c <BSP_LED_On>

			while (count > osKernelSysTick())
 8000242:	e006      	b.n	8000252 <task0+0x30>
			{
				/* Toggle LED3 every 250ms*/
				osDelay(2500);
 8000244:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000248:	f001 fd97 	bl	8001d7a <osDelay>
				BSP_LED_Toggle(LED3);
 800024c:	2000      	movs	r0, #0
 800024e:	f000 f98d 	bl	800056c <BSP_LED_Toggle>
			while (count > osKernelSysTick())
 8000252:	f001 fd82 	bl	8001d5a <osKernelSysTick>
 8000256:	4602      	mov	r2, r0
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	4293      	cmp	r3, r2
 800025c:	d8f2      	bhi.n	8000244 <task0+0x22>
			}

			/* Turn off LED3 */
			BSP_LED_Off(LED3);
 800025e:	2000      	movs	r0, #0
 8000260:	f000 f970 	bl	8000544 <BSP_LED_Off>
			count = osKernelSysTick() + 5000;
 8000264:	e7e3      	b.n	800022e <task0+0xc>
	...

08000268 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af02      	add	r7, sp, #8
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 800026e:	f000 f9c7 	bl	8000600 <HAL_Init>

	/* Configure the System clock to 80 MHz */
	SystemClock_Config();
 8000272:	f000 f819 	bl	80002a8 <SystemClock_Config>

	/* Initialize LED */
	BSP_LED_Init(LED3);
 8000276:	2000      	movs	r0, #0
 8000278:	f000 f91c 	bl	80004b4 <BSP_LED_Init>


	// TERMINA TASK TEST

	int32_t status = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
	__termina_id_t id = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	603b      	str	r3, [r7, #0]
	__termina_task__init(id, 0, 4096, task0, &id, &status);
 8000284:	6838      	ldr	r0, [r7, #0]
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	9301      	str	r3, [sp, #4]
 800028a:	463b      	mov	r3, r7
 800028c:	9300      	str	r3, [sp, #0]
 800028e:	4b05      	ldr	r3, [pc, #20]	@ (80002a4 <main+0x3c>)
 8000290:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000294:	2100      	movs	r1, #0
 8000296:	f003 f84d 	bl	8003334 <__termina_task__init>

	// END OF TERMINA TASK TEST


	/* Start scheduler */
	osKernelStart();
 800029a:	f001 fd57 	bl	8001d4c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	for (;;);
 800029e:	bf00      	nop
 80002a0:	e7fd      	b.n	800029e <main+0x36>
 80002a2:	bf00      	nop
 80002a4:	08000223 	.word	0x08000223

080002a8 <SystemClock_Config>:
 *            Flash Latency(WS)              = 4
 * @param  None
 * @retval None
 */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b096      	sub	sp, #88	@ 0x58
 80002ac:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ae:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	463b      	mov	r3, r7
 80002c0:	2244      	movs	r2, #68	@ 0x44
 80002c2:	2100      	movs	r1, #0
 80002c4:	4618      	mov	r0, r3
 80002c6:	f003 f867 	bl	8003398 <memset>

	/* MSI is enabled after System reset, activate PLL with MSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002ca:	2310      	movs	r3, #16
 80002cc:	603b      	str	r3, [r7, #0]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002ce:	2301      	movs	r3, #1
 80002d0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002d2:	2360      	movs	r3, #96	@ 0x60
 80002d4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002d6:	2300      	movs	r3, #0
 80002d8:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002da:	2302      	movs	r3, #2
 80002dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002de:	2301      	movs	r3, #1
 80002e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80002e2:	2301      	movs	r3, #1
 80002e4:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLN = 40;
 80002e6:	2328      	movs	r3, #40	@ 0x28
 80002e8:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLR = 2;
 80002ea:	2302      	movs	r3, #2
 80002ec:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = 7;
 80002ee:	2307      	movs	r3, #7
 80002f0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80002f2:	2304      	movs	r3, #4
 80002f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	463b      	mov	r3, r7
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fc4d 	bl	8000b98 <HAL_RCC_OscConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x60>
	{
		/* Initialization Error */
		while(1);
 8000304:	bf00      	nop
 8000306:	e7fd      	b.n	8000304 <SystemClock_Config+0x5c>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000308:	230f      	movs	r3, #15
 800030a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030c:	2303      	movs	r3, #3
 800030e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	657b      	str	r3, [r7, #84]	@ 0x54
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800031c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000320:	2104      	movs	r1, #4
 8000322:	4618      	mov	r0, r3
 8000324:	f001 f84c 	bl	80013c0 <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x8a>
	{
		/* Initialization Error */
		while(1);
 800032e:	bf00      	nop
 8000330:	e7fd      	b.n	800032e <SystemClock_Config+0x86>
	}
}
 8000332:	bf00      	nop
 8000334:	3758      	adds	r7, #88	@ 0x58
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b08e      	sub	sp, #56	@ 0x38
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000344:	2300      	movs	r3, #0
 8000346:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800034a:	4b38      	ldr	r3, [pc, #224]	@ (800042c <HAL_InitTick+0xf0>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d062      	beq.n	8000418 <HAL_InitTick+0xdc>
  {
    /* Enable TIM6 clock */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000352:	4b37      	ldr	r3, [pc, #220]	@ (8000430 <HAL_InitTick+0xf4>)
 8000354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000356:	4a36      	ldr	r2, [pc, #216]	@ (8000430 <HAL_InitTick+0xf4>)
 8000358:	f043 0310 	orr.w	r3, r3, #16
 800035c:	6593      	str	r3, [r2, #88]	@ 0x58
 800035e:	4b34      	ldr	r3, [pc, #208]	@ (8000430 <HAL_InitTick+0xf4>)
 8000360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000362:	f003 0310 	and.w	r3, r3, #16
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]

    /* Get clock configuration */
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800036a:	f107 0210 	add.w	r2, r7, #16
 800036e:	f107 0314 	add.w	r3, r7, #20
 8000372:	4611      	mov	r1, r2
 8000374:	4618      	mov	r0, r3
 8000376:	f001 f9d1 	bl	800171c <HAL_RCC_GetClockConfig>

    /* Get APB1 prescaler */
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800037a:	6a3b      	ldr	r3, [r7, #32]
 800037c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Compute TIM6 clock */
    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800037e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000380:	2b00      	cmp	r3, #0
 8000382:	d103      	bne.n	800038c <HAL_InitTick+0x50>
    {
      uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000384:	f001 f9b4 	bl	80016f0 <HAL_RCC_GetPCLK1Freq>
 8000388:	6378      	str	r0, [r7, #52]	@ 0x34
 800038a:	e004      	b.n	8000396 <HAL_InitTick+0x5a>
    }
    else
    {
      uwTimclock = 2U * HAL_RCC_GetPCLK1Freq();
 800038c:	f001 f9b0 	bl	80016f0 <HAL_RCC_GetPCLK1Freq>
 8000390:	4603      	mov	r3, r0
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
    uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000398:	4a26      	ldr	r2, [pc, #152]	@ (8000434 <HAL_InitTick+0xf8>)
 800039a:	fba2 2303 	umull	r2, r3, r2, r3
 800039e:	0c9b      	lsrs	r3, r3, #18
 80003a0:	3b01      	subs	r3, #1
 80003a2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Initialize TIM6 */
    TimHandle.Instance = TIM6;
 80003a4:	4b24      	ldr	r3, [pc, #144]	@ (8000438 <HAL_InitTick+0xfc>)
 80003a6:	4a25      	ldr	r2, [pc, #148]	@ (800043c <HAL_InitTick+0x100>)
 80003a8:	601a      	str	r2, [r3, #0]
    + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
    + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
    + ClockDivision = 0
    + Counter direction = Up
    */
    TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80003aa:	4b23      	ldr	r3, [pc, #140]	@ (8000438 <HAL_InitTick+0xfc>)
 80003ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80003b0:	60da      	str	r2, [r3, #12]
    TimHandle.Init.Prescaler = uwPrescalerValue;
 80003b2:	4a21      	ldr	r2, [pc, #132]	@ (8000438 <HAL_InitTick+0xfc>)
 80003b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003b6:	6053      	str	r3, [r2, #4]
    TimHandle.Init.ClockDivision = 0;
 80003b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000438 <HAL_InitTick+0xfc>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
    TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003be:	4b1e      	ldr	r3, [pc, #120]	@ (8000438 <HAL_InitTick+0xfc>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
    TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000438 <HAL_InitTick+0xfc>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80003ca:	481b      	ldr	r0, [pc, #108]	@ (8000438 <HAL_InitTick+0xfc>)
 80003cc:	f001 fa38 	bl	8001840 <HAL_TIM_Base_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d11c      	bne.n	8000410 <HAL_InitTick+0xd4>
    {
      /* Start the TIM time Base generation in interrupt mode */
      if (HAL_TIM_Base_Start_IT(&TimHandle) == HAL_OK)
 80003d6:	4818      	ldr	r0, [pc, #96]	@ (8000438 <HAL_InitTick+0xfc>)
 80003d8:	f001 fa94 	bl	8001904 <HAL_TIM_Base_Start_IT>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d112      	bne.n	8000408 <HAL_InitTick+0xcc>
      {
        /* Enable the TIM6_DAC global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80003e2:	2036      	movs	r0, #54	@ 0x36
 80003e4:	f000 fa18 	bl	8000818 <HAL_NVIC_EnableIRQ>

        /* Configure the SysTick IRQ priority */
        if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2b0f      	cmp	r3, #15
 80003ec:	d808      	bhi.n	8000400 <HAL_InitTick+0xc4>
        {
          /*Configure the TIM6_DAC IRQ priority */
          HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80003ee:	2200      	movs	r2, #0
 80003f0:	6879      	ldr	r1, [r7, #4]
 80003f2:	2036      	movs	r0, #54	@ 0x36
 80003f4:	f000 f9f4 	bl	80007e0 <HAL_NVIC_SetPriority>
          uwTickPrio = TickPriority;
 80003f8:	4a11      	ldr	r2, [pc, #68]	@ (8000440 <HAL_InitTick+0x104>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	6013      	str	r3, [r2, #0]
 80003fe:	e00e      	b.n	800041e <HAL_InitTick+0xe2>
        }
        else
        {
          status = HAL_ERROR;
 8000400:	2301      	movs	r3, #1
 8000402:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000406:	e00a      	b.n	800041e <HAL_InitTick+0xe2>
        }
      }
      else
      {
        status = HAL_ERROR;
 8000408:	2301      	movs	r3, #1
 800040a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800040e:	e006      	b.n	800041e <HAL_InitTick+0xe2>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000410:	2301      	movs	r3, #1
 8000412:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000416:	e002      	b.n	800041e <HAL_InitTick+0xe2>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000418:	2301      	movs	r3, #1
 800041a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  }

  /* Return function status */
  return status;
 800041e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000422:	4618      	mov	r0, r3
 8000424:	3738      	adds	r7, #56	@ 0x38
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	2000000c 	.word	0x2000000c
 8000430:	40021000 	.word	0x40021000
 8000434:	431bde83 	.word	0x431bde83
 8000438:	20000038 	.word	0x20000038
 800043c:	40001000 	.word	0x40001000
 8000440:	20000008 	.word	0x20000008

08000444 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 800044c:	f000 f8f0 	bl	8000630 <HAL_IncTick>
}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 800045c:	4802      	ldr	r0, [pc, #8]	@ (8000468 <TIM6_DAC_IRQHandler+0x10>)
 800045e:	f001 faa5 	bl	80019ac <HAL_TIM_IRQHandler>
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000038 	.word	0x20000038

0800046c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800047e:	bf00      	nop
 8000480:	e7fd      	b.n	800047e <HardFault_Handler+0x4>

08000482 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000486:	bf00      	nop
 8000488:	e7fd      	b.n	8000486 <MemManage_Handler+0x4>

0800048a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800048e:	bf00      	nop
 8000490:	e7fd      	b.n	800048e <BusFault_Handler+0x4>

08000492 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000496:	bf00      	nop
 8000498:	e7fd      	b.n	8000496 <UsageFault_Handler+0x4>

0800049a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  osSystickHandler();
 80004ac:	f001 fc79 	bl	8001da2 <osSystickHandler>
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b088      	sub	sp, #32
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80004be:	4b15      	ldr	r3, [pc, #84]	@ (8000514 <BSP_LED_Init+0x60>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c2:	4a14      	ldr	r2, [pc, #80]	@ (8000514 <BSP_LED_Init+0x60>)
 80004c4:	f043 0302 	orr.w	r3, r3, #2
 80004c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ca:	4b12      	ldr	r3, [pc, #72]	@ (8000514 <BSP_LED_Init+0x60>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ce:	f003 0302 	and.w	r3, r3, #2
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80004d6:	2308      	movs	r3, #8
 80004d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004da:	2301      	movs	r3, #1
 80004dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e2:	2302      	movs	r3, #2
 80004e4:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000518 <BSP_LED_Init+0x64>)
 80004ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ee:	f107 020c 	add.w	r2, r7, #12
 80004f2:	4611      	mov	r1, r2
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 f99d 	bl	8000834 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	4a06      	ldr	r2, [pc, #24]	@ (8000518 <BSP_LED_Init+0x64>)
 80004fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000502:	2108      	movs	r1, #8
 8000504:	2200      	movs	r2, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fafe 	bl	8000b08 <HAL_GPIO_WritePin>
}
 800050c:	bf00      	nop
 800050e:	3720      	adds	r7, #32
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000
 8000518:	20000000 	.word	0x20000000

0800051c <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	4a05      	ldr	r2, [pc, #20]	@ (8000540 <BSP_LED_On+0x24>)
 800052a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800052e:	2108      	movs	r1, #8
 8000530:	2201      	movs	r2, #1
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fae8 	bl	8000b08 <HAL_GPIO_WritePin>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000000 	.word	0x20000000

08000544 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	4a05      	ldr	r2, [pc, #20]	@ (8000568 <BSP_LED_Off+0x24>)
 8000552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000556:	2108      	movs	r1, #8
 8000558:	2200      	movs	r2, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fad4 	bl	8000b08 <HAL_GPIO_WritePin>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000000 	.word	0x20000000

0800056c <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *            @arg  LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4a05      	ldr	r2, [pc, #20]	@ (8000590 <BSP_LED_Toggle+0x24>)
 800057a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800057e:	2208      	movs	r2, #8
 8000580:	4611      	mov	r1, r2
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fad8 	bl	8000b38 <HAL_GPIO_TogglePin>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000000 	.word	0x20000000

08000594 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000598:	4b17      	ldr	r3, [pc, #92]	@ (80005f8 <SystemInit+0x64>)
 800059a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800059e:	4a16      	ldr	r2, [pc, #88]	@ (80005f8 <SystemInit+0x64>)
 80005a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80005a8:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <SystemInit+0x68>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a13      	ldr	r2, [pc, #76]	@ (80005fc <SystemInit+0x68>)
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005b4:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <SystemInit+0x68>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80005ba:	4b10      	ldr	r3, [pc, #64]	@ (80005fc <SystemInit+0x68>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a0f      	ldr	r2, [pc, #60]	@ (80005fc <SystemInit+0x68>)
 80005c0:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80005c4:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80005c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80005ca:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <SystemInit+0x68>)
 80005cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005d2:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <SystemInit+0x68>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a09      	ldr	r2, [pc, #36]	@ (80005fc <SystemInit+0x68>)
 80005d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80005dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80005de:	4b07      	ldr	r3, [pc, #28]	@ (80005fc <SystemInit+0x68>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005e4:	4b04      	ldr	r3, [pc, #16]	@ (80005f8 <SystemInit+0x64>)
 80005e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80005ea:	609a      	str	r2, [r3, #8]
#endif
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000ed00 	.word	0xe000ed00
 80005fc:	40021000 	.word	0x40021000

08000600 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000606:	2300      	movs	r3, #0
 8000608:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800060a:	2003      	movs	r0, #3
 800060c:	f000 f8dd 	bl	80007ca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000610:	200f      	movs	r0, #15
 8000612:	f7ff fe93 	bl	800033c <HAL_InitTick>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d002      	beq.n	8000622 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800061c:	2301      	movs	r3, #1
 800061e:	71fb      	strb	r3, [r7, #7]
 8000620:	e001      	b.n	8000626 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000622:	f000 faa3 	bl	8000b6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000626:	79fb      	ldrb	r3, [r7, #7]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000634:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <HAL_IncTick+0x20>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <HAL_IncTick+0x24>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4413      	add	r3, r2
 8000640:	4a04      	ldr	r2, [pc, #16]	@ (8000654 <HAL_IncTick+0x24>)
 8000642:	6013      	str	r3, [r2, #0]
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	2000000c 	.word	0x2000000c
 8000654:	20000084 	.word	0x20000084

08000658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return uwTick;
 800065c:	4b03      	ldr	r3, [pc, #12]	@ (800066c <HAL_GetTick+0x14>)
 800065e:	681b      	ldr	r3, [r3, #0]
}
 8000660:	4618      	mov	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20000084 	.word	0x20000084

08000670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000680:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800068c:	4013      	ands	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000698:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800069c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a2:	4a04      	ldr	r2, [pc, #16]	@ (80006b4 <__NVIC_SetPriorityGrouping+0x44>)
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	60d3      	str	r3, [r2, #12]
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006bc:	4b04      	ldr	r3, [pc, #16]	@ (80006d0 <__NVIC_GetPriorityGrouping+0x18>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	0a1b      	lsrs	r3, r3, #8
 80006c2:	f003 0307 	and.w	r3, r3, #7
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db0b      	blt.n	80006fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f003 021f 	and.w	r2, r3, #31
 80006ec:	4907      	ldr	r1, [pc, #28]	@ (800070c <__NVIC_EnableIRQ+0x38>)
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	095b      	lsrs	r3, r3, #5
 80006f4:	2001      	movs	r0, #1
 80006f6:	fa00 f202 	lsl.w	r2, r0, r2
 80006fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000e100 	.word	0xe000e100

08000710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000720:	2b00      	cmp	r3, #0
 8000722:	db0a      	blt.n	800073a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	490c      	ldr	r1, [pc, #48]	@ (800075c <__NVIC_SetPriority+0x4c>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	0112      	lsls	r2, r2, #4
 8000730:	b2d2      	uxtb	r2, r2
 8000732:	440b      	add	r3, r1
 8000734:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000738:	e00a      	b.n	8000750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4908      	ldr	r1, [pc, #32]	@ (8000760 <__NVIC_SetPriority+0x50>)
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	f003 030f 	and.w	r3, r3, #15
 8000746:	3b04      	subs	r3, #4
 8000748:	0112      	lsls	r2, r2, #4
 800074a:	b2d2      	uxtb	r2, r2
 800074c:	440b      	add	r3, r1
 800074e:	761a      	strb	r2, [r3, #24]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000e100 	.word	0xe000e100
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000764:	b480      	push	{r7}
 8000766:	b089      	sub	sp, #36	@ 0x24
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f003 0307 	and.w	r3, r3, #7
 8000776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	f1c3 0307 	rsb	r3, r3, #7
 800077e:	2b04      	cmp	r3, #4
 8000780:	bf28      	it	cs
 8000782:	2304      	movcs	r3, #4
 8000784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3304      	adds	r3, #4
 800078a:	2b06      	cmp	r3, #6
 800078c:	d902      	bls.n	8000794 <NVIC_EncodePriority+0x30>
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3b03      	subs	r3, #3
 8000792:	e000      	b.n	8000796 <NVIC_EncodePriority+0x32>
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	f04f 32ff 	mov.w	r2, #4294967295
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	43da      	mvns	r2, r3
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	401a      	ands	r2, r3
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ac:	f04f 31ff 	mov.w	r1, #4294967295
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	fa01 f303 	lsl.w	r3, r1, r3
 80007b6:	43d9      	mvns	r1, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007bc:	4313      	orrs	r3, r2
         );
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3724      	adds	r7, #36	@ 0x24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ff4c 	bl	8000670 <__NVIC_SetPriorityGrouping>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
 80007ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007f2:	f7ff ff61 	bl	80006b8 <__NVIC_GetPriorityGrouping>
 80007f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	68b9      	ldr	r1, [r7, #8]
 80007fc:	6978      	ldr	r0, [r7, #20]
 80007fe:	f7ff ffb1 	bl	8000764 <NVIC_EncodePriority>
 8000802:	4602      	mov	r2, r0
 8000804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000808:	4611      	mov	r1, r2
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff80 	bl	8000710 <__NVIC_SetPriority>
}
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff54 	bl	80006d4 <__NVIC_EnableIRQ>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000834:	b480      	push	{r7}
 8000836:	b087      	sub	sp, #28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000842:	e148      	b.n	8000ad6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	2101      	movs	r1, #1
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	fa01 f303 	lsl.w	r3, r1, r3
 8000850:	4013      	ands	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	2b00      	cmp	r3, #0
 8000858:	f000 813a 	beq.w	8000ad0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f003 0303 	and.w	r3, r3, #3
 8000864:	2b01      	cmp	r3, #1
 8000866:	d005      	beq.n	8000874 <HAL_GPIO_Init+0x40>
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	f003 0303 	and.w	r3, r3, #3
 8000870:	2b02      	cmp	r3, #2
 8000872:	d130      	bne.n	80008d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	2203      	movs	r2, #3
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	4013      	ands	r3, r2
 800088a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	68da      	ldr	r2, [r3, #12]
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	4313      	orrs	r3, r2
 800089c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008aa:	2201      	movs	r2, #1
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	4013      	ands	r3, r2
 80008b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	091b      	lsrs	r3, r3, #4
 80008c0:	f003 0201 	and.w	r2, r3, #1
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	693a      	ldr	r2, [r7, #16]
 80008d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f003 0303 	and.w	r3, r3, #3
 80008de:	2b03      	cmp	r3, #3
 80008e0:	d017      	beq.n	8000912 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	2203      	movs	r2, #3
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43db      	mvns	r3, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4013      	ands	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	689a      	ldr	r2, [r3, #8]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4313      	orrs	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	f003 0303 	and.w	r3, r3, #3
 800091a:	2b02      	cmp	r3, #2
 800091c:	d123      	bne.n	8000966 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	08da      	lsrs	r2, r3, #3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3208      	adds	r2, #8
 8000926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800092a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	220f      	movs	r2, #15
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43db      	mvns	r3, r3
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4013      	ands	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	691a      	ldr	r2, [r3, #16]
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	f003 0307 	and.w	r3, r3, #7
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	4313      	orrs	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	08da      	lsrs	r2, r3, #3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3208      	adds	r2, #8
 8000960:	6939      	ldr	r1, [r7, #16]
 8000962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	2203      	movs	r2, #3
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4013      	ands	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	f003 0203 	and.w	r2, r3, #3
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	4313      	orrs	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f000 8094 	beq.w	8000ad0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a8:	4b52      	ldr	r3, [pc, #328]	@ (8000af4 <HAL_GPIO_Init+0x2c0>)
 80009aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ac:	4a51      	ldr	r2, [pc, #324]	@ (8000af4 <HAL_GPIO_Init+0x2c0>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80009b4:	4b4f      	ldr	r3, [pc, #316]	@ (8000af4 <HAL_GPIO_Init+0x2c0>)
 80009b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009c0:	4a4d      	ldr	r2, [pc, #308]	@ (8000af8 <HAL_GPIO_Init+0x2c4>)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	089b      	lsrs	r3, r3, #2
 80009c6:	3302      	adds	r3, #2
 80009c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	f003 0303 	and.w	r3, r3, #3
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	220f      	movs	r2, #15
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4013      	ands	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80009ea:	d00d      	beq.n	8000a08 <HAL_GPIO_Init+0x1d4>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a43      	ldr	r2, [pc, #268]	@ (8000afc <HAL_GPIO_Init+0x2c8>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d007      	beq.n	8000a04 <HAL_GPIO_Init+0x1d0>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a42      	ldr	r2, [pc, #264]	@ (8000b00 <HAL_GPIO_Init+0x2cc>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d101      	bne.n	8000a00 <HAL_GPIO_Init+0x1cc>
 80009fc:	2302      	movs	r3, #2
 80009fe:	e004      	b.n	8000a0a <HAL_GPIO_Init+0x1d6>
 8000a00:	2307      	movs	r3, #7
 8000a02:	e002      	b.n	8000a0a <HAL_GPIO_Init+0x1d6>
 8000a04:	2301      	movs	r3, #1
 8000a06:	e000      	b.n	8000a0a <HAL_GPIO_Init+0x1d6>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	f002 0203 	and.w	r2, r2, #3
 8000a10:	0092      	lsls	r2, r2, #2
 8000a12:	4093      	lsls	r3, r2
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a1a:	4937      	ldr	r1, [pc, #220]	@ (8000af8 <HAL_GPIO_Init+0x2c4>)
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	3302      	adds	r3, #2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a28:	4b36      	ldr	r3, [pc, #216]	@ (8000b04 <HAL_GPIO_Init+0x2d0>)
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	43db      	mvns	r3, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d003      	beq.n	8000a4c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a4c:	4a2d      	ldr	r2, [pc, #180]	@ (8000b04 <HAL_GPIO_Init+0x2d0>)
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a52:	4b2c      	ldr	r3, [pc, #176]	@ (8000b04 <HAL_GPIO_Init+0x2d0>)
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a76:	4a23      	ldr	r2, [pc, #140]	@ (8000b04 <HAL_GPIO_Init+0x2d0>)
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a7c:	4b21      	ldr	r3, [pc, #132]	@ (8000b04 <HAL_GPIO_Init+0x2d0>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d003      	beq.n	8000aa0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000aa0:	4a18      	ldr	r2, [pc, #96]	@ (8000b04 <HAL_GPIO_Init+0x2d0>)
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	@ (8000b04 <HAL_GPIO_Init+0x2d0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000aca:	4a0e      	ldr	r2, [pc, #56]	@ (8000b04 <HAL_GPIO_Init+0x2d0>)
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f47f aeaf 	bne.w	8000844 <HAL_GPIO_Init+0x10>
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	bf00      	nop
 8000aea:	371c      	adds	r7, #28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010000 	.word	0x40010000
 8000afc:	48000400 	.word	0x48000400
 8000b00:	48000800 	.word	0x48000800
 8000b04:	40010400 	.word	0x40010400

08000b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	807b      	strh	r3, [r7, #2]
 8000b14:	4613      	mov	r3, r2
 8000b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b18:	787b      	ldrb	r3, [r7, #1]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b1e:	887a      	ldrh	r2, [r7, #2]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b24:	e002      	b.n	8000b2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b26:	887a      	ldrh	r2, [r7, #2]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b4a:	887a      	ldrh	r2, [r7, #2]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	041a      	lsls	r2, r3, #16
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	43d9      	mvns	r1, r3
 8000b56:	887b      	ldrh	r3, [r7, #2]
 8000b58:	400b      	ands	r3, r1
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	619a      	str	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <HAL_MspInit>:
  * @brief  Initialize the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually
            modified by the user
   */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b80:	4b04      	ldr	r3, [pc, #16]	@ (8000b94 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40007000 	.word	0x40007000

08000b98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	f000 bc02 	b.w	80013b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bac:	4b96      	ldr	r3, [pc, #600]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	f003 030c 	and.w	r3, r3, #12
 8000bb4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000bb6:	4b94      	ldr	r3, [pc, #592]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	f003 0303 	and.w	r3, r3, #3
 8000bbe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f000 80e4 	beq.w	8000d96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d007      	beq.n	8000be4 <HAL_RCC_OscConfig+0x4c>
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	2b0c      	cmp	r3, #12
 8000bd8:	f040 808b 	bne.w	8000cf2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	f040 8087 	bne.w	8000cf2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000be4:	4b88      	ldr	r3, [pc, #544]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d005      	beq.n	8000bfc <HAL_RCC_OscConfig+0x64>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d101      	bne.n	8000bfc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e3d9      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6a1a      	ldr	r2, [r3, #32]
 8000c00:	4b81      	ldr	r3, [pc, #516]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d004      	beq.n	8000c16 <HAL_RCC_OscConfig+0x7e>
 8000c0c:	4b7e      	ldr	r3, [pc, #504]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000c14:	e005      	b.n	8000c22 <HAL_RCC_OscConfig+0x8a>
 8000c16:	4b7c      	ldr	r3, [pc, #496]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c1c:	091b      	lsrs	r3, r3, #4
 8000c1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d223      	bcs.n	8000c6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a1b      	ldr	r3, [r3, #32]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 fda8 	bl	8001780 <RCC_SetFlashLatencyFromMSIRange>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e3ba      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c3a:	4b73      	ldr	r3, [pc, #460]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a72      	ldr	r2, [pc, #456]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	4b70      	ldr	r3, [pc, #448]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6a1b      	ldr	r3, [r3, #32]
 8000c52:	496d      	ldr	r1, [pc, #436]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000c54:	4313      	orrs	r3, r2
 8000c56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c58:	4b6b      	ldr	r3, [pc, #428]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	69db      	ldr	r3, [r3, #28]
 8000c64:	021b      	lsls	r3, r3, #8
 8000c66:	4968      	ldr	r1, [pc, #416]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	604b      	str	r3, [r1, #4]
 8000c6c:	e025      	b.n	8000cba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c6e:	4b66      	ldr	r3, [pc, #408]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a65      	ldr	r2, [pc, #404]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000c74:	f043 0308 	orr.w	r3, r3, #8
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	4b63      	ldr	r3, [pc, #396]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a1b      	ldr	r3, [r3, #32]
 8000c86:	4960      	ldr	r1, [pc, #384]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c8c:	4b5e      	ldr	r3, [pc, #376]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	021b      	lsls	r3, r3, #8
 8000c9a:	495b      	ldr	r1, [pc, #364]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d109      	bne.n	8000cba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a1b      	ldr	r3, [r3, #32]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fd68 	bl	8001780 <RCC_SetFlashLatencyFromMSIRange>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e37a      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000cba:	f000 fc81 	bl	80015c0 <HAL_RCC_GetSysClockFreq>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	4b51      	ldr	r3, [pc, #324]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	091b      	lsrs	r3, r3, #4
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	4950      	ldr	r1, [pc, #320]	@ (8000e0c <HAL_RCC_OscConfig+0x274>)
 8000ccc:	5ccb      	ldrb	r3, [r1, r3]
 8000cce:	f003 031f 	and.w	r3, r3, #31
 8000cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd6:	4a4e      	ldr	r2, [pc, #312]	@ (8000e10 <HAL_RCC_OscConfig+0x278>)
 8000cd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000cda:	4b4e      	ldr	r3, [pc, #312]	@ (8000e14 <HAL_RCC_OscConfig+0x27c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fb2c 	bl	800033c <HAL_InitTick>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d052      	beq.n	8000d94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	e35e      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d032      	beq.n	8000d60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000cfa:	4b43      	ldr	r3, [pc, #268]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a42      	ldr	r2, [pc, #264]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d06:	f7ff fca7 	bl	8000658 <HAL_GetTick>
 8000d0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d0c:	e008      	b.n	8000d20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d0e:	f7ff fca3 	bl	8000658 <HAL_GetTick>
 8000d12:	4602      	mov	r2, r0
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d901      	bls.n	8000d20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e347      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d20:	4b39      	ldr	r3, [pc, #228]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d0f0      	beq.n	8000d0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d2c:	4b36      	ldr	r3, [pc, #216]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a35      	ldr	r2, [pc, #212]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000d32:	f043 0308 	orr.w	r3, r3, #8
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	4b33      	ldr	r3, [pc, #204]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a1b      	ldr	r3, [r3, #32]
 8000d44:	4930      	ldr	r1, [pc, #192]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000d46:	4313      	orrs	r3, r2
 8000d48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	021b      	lsls	r3, r3, #8
 8000d58:	492b      	ldr	r1, [pc, #172]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	604b      	str	r3, [r1, #4]
 8000d5e:	e01a      	b.n	8000d96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d60:	4b29      	ldr	r3, [pc, #164]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a28      	ldr	r2, [pc, #160]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000d66:	f023 0301 	bic.w	r3, r3, #1
 8000d6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fc74 	bl	8000658 <HAL_GetTick>
 8000d70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d74:	f7ff fc70 	bl	8000658 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e314      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d86:	4b20      	ldr	r3, [pc, #128]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f0      	bne.n	8000d74 <HAL_RCC_OscConfig+0x1dc>
 8000d92:	e000      	b.n	8000d96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d073      	beq.n	8000e8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	2b08      	cmp	r3, #8
 8000da6:	d005      	beq.n	8000db4 <HAL_RCC_OscConfig+0x21c>
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	2b0c      	cmp	r3, #12
 8000dac:	d10e      	bne.n	8000dcc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	d10b      	bne.n	8000dcc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db4:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d063      	beq.n	8000e88 <HAL_RCC_OscConfig+0x2f0>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d15f      	bne.n	8000e88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e2f1      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dd4:	d106      	bne.n	8000de4 <HAL_RCC_OscConfig+0x24c>
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a0b      	ldr	r2, [pc, #44]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e025      	b.n	8000e30 <HAL_RCC_OscConfig+0x298>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000dec:	d114      	bne.n	8000e18 <HAL_RCC_OscConfig+0x280>
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a05      	ldr	r2, [pc, #20]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b03      	ldr	r3, [pc, #12]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a02      	ldr	r2, [pc, #8]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	e013      	b.n	8000e30 <HAL_RCC_OscConfig+0x298>
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	08003410 	.word	0x08003410
 8000e10:	20000004 	.word	0x20000004
 8000e14:	20000008 	.word	0x20000008
 8000e18:	4ba0      	ldr	r3, [pc, #640]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a9f      	ldr	r2, [pc, #636]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b9d      	ldr	r3, [pc, #628]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a9c      	ldr	r2, [pc, #624]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d013      	beq.n	8000e60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e38:	f7ff fc0e 	bl	8000658 <HAL_GetTick>
 8000e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e3e:	e008      	b.n	8000e52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e40:	f7ff fc0a 	bl	8000658 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b64      	cmp	r3, #100	@ 0x64
 8000e4c:	d901      	bls.n	8000e52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e2ae      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e52:	4b92      	ldr	r3, [pc, #584]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0f0      	beq.n	8000e40 <HAL_RCC_OscConfig+0x2a8>
 8000e5e:	e014      	b.n	8000e8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e60:	f7ff fbfa 	bl	8000658 <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e66:	e008      	b.n	8000e7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e68:	f7ff fbf6 	bl	8000658 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b64      	cmp	r3, #100	@ 0x64
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e29a      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e7a:	4b88      	ldr	r3, [pc, #544]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f0      	bne.n	8000e68 <HAL_RCC_OscConfig+0x2d0>
 8000e86:	e000      	b.n	8000e8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d060      	beq.n	8000f58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	2b04      	cmp	r3, #4
 8000e9a:	d005      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x310>
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	2b0c      	cmp	r3, #12
 8000ea0:	d119      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d116      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ea8:	4b7c      	ldr	r3, [pc, #496]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d005      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x328>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d101      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e277      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec0:	4b76      	ldr	r3, [pc, #472]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	691b      	ldr	r3, [r3, #16]
 8000ecc:	061b      	lsls	r3, r3, #24
 8000ece:	4973      	ldr	r1, [pc, #460]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ed4:	e040      	b.n	8000f58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d023      	beq.n	8000f26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ede:	4b6f      	ldr	r3, [pc, #444]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a6e      	ldr	r2, [pc, #440]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eea:	f7ff fbb5 	bl	8000658 <HAL_GetTick>
 8000eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef2:	f7ff fbb1 	bl	8000658 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e255      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f04:	4b65      	ldr	r3, [pc, #404]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f0      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f10:	4b62      	ldr	r3, [pc, #392]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	061b      	lsls	r3, r3, #24
 8000f1e:	495f      	ldr	r1, [pc, #380]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000f20:	4313      	orrs	r3, r2
 8000f22:	604b      	str	r3, [r1, #4]
 8000f24:	e018      	b.n	8000f58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f26:	4b5d      	ldr	r3, [pc, #372]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a5c      	ldr	r2, [pc, #368]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f32:	f7ff fb91 	bl	8000658 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f38:	e008      	b.n	8000f4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f3a:	f7ff fb8d 	bl	8000658 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e231      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f4c:	4b53      	ldr	r3, [pc, #332]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f0      	bne.n	8000f3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d03c      	beq.n	8000fde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d01c      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f6c:	4b4b      	ldr	r3, [pc, #300]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f72:	4a4a      	ldr	r2, [pc, #296]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f7c:	f7ff fb6c 	bl	8000658 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f84:	f7ff fb68 	bl	8000658 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e20c      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f96:	4b41      	ldr	r3, [pc, #260]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0ef      	beq.n	8000f84 <HAL_RCC_OscConfig+0x3ec>
 8000fa4:	e01b      	b.n	8000fde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fac:	4a3b      	ldr	r2, [pc, #236]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000fae:	f023 0301 	bic.w	r3, r3, #1
 8000fb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fb6:	f7ff fb4f 	bl	8000658 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fbe:	f7ff fb4b 	bl	8000658 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e1ef      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fd0:	4b32      	ldr	r3, [pc, #200]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1ef      	bne.n	8000fbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 80a6 	beq.w	8001138 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fec:	2300      	movs	r3, #0
 8000fee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10d      	bne.n	8001018 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ffc:	4b27      	ldr	r3, [pc, #156]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8000ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001000:	4a26      	ldr	r2, [pc, #152]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8001002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001006:	6593      	str	r3, [r2, #88]	@ 0x58
 8001008:	4b24      	ldr	r3, [pc, #144]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 800100a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001014:	2301      	movs	r3, #1
 8001016:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001018:	4b21      	ldr	r3, [pc, #132]	@ (80010a0 <HAL_RCC_OscConfig+0x508>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001020:	2b00      	cmp	r3, #0
 8001022:	d118      	bne.n	8001056 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001024:	4b1e      	ldr	r3, [pc, #120]	@ (80010a0 <HAL_RCC_OscConfig+0x508>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a1d      	ldr	r2, [pc, #116]	@ (80010a0 <HAL_RCC_OscConfig+0x508>)
 800102a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800102e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001030:	f7ff fb12 	bl	8000658 <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001038:	f7ff fb0e 	bl	8000658 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e1b2      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <HAL_RCC_OscConfig+0x508>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f0      	beq.n	8001038 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d108      	bne.n	8001070 <HAL_RCC_OscConfig+0x4d8>
 800105e:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8001060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001064:	4a0d      	ldr	r2, [pc, #52]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800106e:	e029      	b.n	80010c4 <HAL_RCC_OscConfig+0x52c>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	2b05      	cmp	r3, #5
 8001076:	d115      	bne.n	80010a4 <HAL_RCC_OscConfig+0x50c>
 8001078:	4b08      	ldr	r3, [pc, #32]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 800107a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800107e:	4a07      	ldr	r2, [pc, #28]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001088:	4b04      	ldr	r3, [pc, #16]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 800108a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800108e:	4a03      	ldr	r2, [pc, #12]	@ (800109c <HAL_RCC_OscConfig+0x504>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001098:	e014      	b.n	80010c4 <HAL_RCC_OscConfig+0x52c>
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000
 80010a0:	40007000 	.word	0x40007000
 80010a4:	4b9a      	ldr	r3, [pc, #616]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 80010a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010aa:	4a99      	ldr	r2, [pc, #612]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010b4:	4b96      	ldr	r3, [pc, #600]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 80010b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010ba:	4a95      	ldr	r2, [pc, #596]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 80010bc:	f023 0304 	bic.w	r3, r3, #4
 80010c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d016      	beq.n	80010fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010cc:	f7ff fac4 	bl	8000658 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010d2:	e00a      	b.n	80010ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d4:	f7ff fac0 	bl	8000658 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e162      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010ea:	4b89      	ldr	r3, [pc, #548]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 80010ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0ed      	beq.n	80010d4 <HAL_RCC_OscConfig+0x53c>
 80010f8:	e015      	b.n	8001126 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010fa:	f7ff faad 	bl	8000658 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001100:	e00a      	b.n	8001118 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001102:	f7ff faa9 	bl	8000658 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001110:	4293      	cmp	r3, r2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e14b      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001118:	4b7d      	ldr	r3, [pc, #500]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 800111a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1ed      	bne.n	8001102 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001126:	7ffb      	ldrb	r3, [r7, #31]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d105      	bne.n	8001138 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800112c:	4b78      	ldr	r3, [pc, #480]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 800112e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001130:	4a77      	ldr	r2, [pc, #476]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 8001132:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001136:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0320 	and.w	r3, r3, #32
 8001140:	2b00      	cmp	r3, #0
 8001142:	d03c      	beq.n	80011be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001148:	2b00      	cmp	r3, #0
 800114a:	d01c      	beq.n	8001186 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800114c:	4b70      	ldr	r3, [pc, #448]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 800114e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001152:	4a6f      	ldr	r2, [pc, #444]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800115c:	f7ff fa7c 	bl	8000658 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001164:	f7ff fa78 	bl	8000658 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e11c      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001176:	4b66      	ldr	r3, [pc, #408]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 8001178:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0ef      	beq.n	8001164 <HAL_RCC_OscConfig+0x5cc>
 8001184:	e01b      	b.n	80011be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001186:	4b62      	ldr	r3, [pc, #392]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 8001188:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800118c:	4a60      	ldr	r2, [pc, #384]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 800118e:	f023 0301 	bic.w	r3, r3, #1
 8001192:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001196:	f7ff fa5f 	bl	8000658 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800119e:	f7ff fa5b 	bl	8000658 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e0ff      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011b0:	4b57      	ldr	r3, [pc, #348]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 80011b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1ef      	bne.n	800119e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 80f3 	beq.w	80013ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	f040 80c9 	bne.w	8001364 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80011d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f003 0203 	and.w	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d12c      	bne.n	8001240 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f0:	3b01      	subs	r3, #1
 80011f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d123      	bne.n	8001240 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001202:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001204:	429a      	cmp	r2, r3
 8001206:	d11b      	bne.n	8001240 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001212:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001214:	429a      	cmp	r2, r3
 8001216:	d113      	bne.n	8001240 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001222:	085b      	lsrs	r3, r3, #1
 8001224:	3b01      	subs	r3, #1
 8001226:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001228:	429a      	cmp	r2, r3
 800122a:	d109      	bne.n	8001240 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	085b      	lsrs	r3, r3, #1
 8001238:	3b01      	subs	r3, #1
 800123a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800123c:	429a      	cmp	r2, r3
 800123e:	d06b      	beq.n	8001318 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	2b0c      	cmp	r3, #12
 8001244:	d062      	beq.n	800130c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001246:	4b32      	ldr	r3, [pc, #200]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e0ac      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001256:	4b2e      	ldr	r3, [pc, #184]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a2d      	ldr	r2, [pc, #180]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 800125c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001260:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001262:	f7ff f9f9 	bl	8000658 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800126a:	f7ff f9f5 	bl	8000658 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e099      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800127c:	4b24      	ldr	r3, [pc, #144]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f0      	bne.n	800126a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001288:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	4b21      	ldr	r3, [pc, #132]	@ (8001314 <HAL_RCC_OscConfig+0x77c>)
 800128e:	4013      	ands	r3, r2
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001298:	3a01      	subs	r2, #1
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	4311      	orrs	r1, r2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80012a2:	0212      	lsls	r2, r2, #8
 80012a4:	4311      	orrs	r1, r2
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80012aa:	0852      	lsrs	r2, r2, #1
 80012ac:	3a01      	subs	r2, #1
 80012ae:	0552      	lsls	r2, r2, #21
 80012b0:	4311      	orrs	r1, r2
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80012b6:	0852      	lsrs	r2, r2, #1
 80012b8:	3a01      	subs	r2, #1
 80012ba:	0652      	lsls	r2, r2, #25
 80012bc:	4311      	orrs	r1, r2
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80012c2:	06d2      	lsls	r2, r2, #27
 80012c4:	430a      	orrs	r2, r1
 80012c6:	4912      	ldr	r1, [pc, #72]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80012cc:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 80012d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 80012de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012e4:	f7ff f9b8 	bl	8000658 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ec:	f7ff f9b4 	bl	8000658 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e058      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012fe:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <HAL_RCC_OscConfig+0x778>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800130a:	e050      	b.n	80013ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e04f      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
 8001310:	40021000 	.word	0x40021000
 8001314:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001318:	4b27      	ldr	r3, [pc, #156]	@ (80013b8 <HAL_RCC_OscConfig+0x820>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d144      	bne.n	80013ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001324:	4b24      	ldr	r3, [pc, #144]	@ (80013b8 <HAL_RCC_OscConfig+0x820>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a23      	ldr	r2, [pc, #140]	@ (80013b8 <HAL_RCC_OscConfig+0x820>)
 800132a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800132e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001330:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <HAL_RCC_OscConfig+0x820>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4a20      	ldr	r2, [pc, #128]	@ (80013b8 <HAL_RCC_OscConfig+0x820>)
 8001336:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800133a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800133c:	f7ff f98c 	bl	8000658 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001344:	f7ff f988 	bl	8000658 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e02c      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001356:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <HAL_RCC_OscConfig+0x820>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0x7ac>
 8001362:	e024      	b.n	80013ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2b0c      	cmp	r3, #12
 8001368:	d01f      	beq.n	80013aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136a:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <HAL_RCC_OscConfig+0x820>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <HAL_RCC_OscConfig+0x820>)
 8001370:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	f7ff f96f 	bl	8000658 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137e:	f7ff f96b 	bl	8000658 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e00f      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001390:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <HAL_RCC_OscConfig+0x820>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f0      	bne.n	800137e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_RCC_OscConfig+0x820>)
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	4905      	ldr	r1, [pc, #20]	@ (80013b8 <HAL_RCC_OscConfig+0x820>)
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_RCC_OscConfig+0x824>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	60cb      	str	r3, [r1, #12]
 80013a8:	e001      	b.n	80013ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40021000 	.word	0x40021000
 80013bc:	feeefffc 	.word	0xfeeefffc

080013c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e0e7      	b.n	80015a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013d4:	4b75      	ldr	r3, [pc, #468]	@ (80015ac <HAL_RCC_ClockConfig+0x1ec>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d910      	bls.n	8001404 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e2:	4b72      	ldr	r3, [pc, #456]	@ (80015ac <HAL_RCC_ClockConfig+0x1ec>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 0207 	bic.w	r2, r3, #7
 80013ea:	4970      	ldr	r1, [pc, #448]	@ (80015ac <HAL_RCC_ClockConfig+0x1ec>)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f2:	4b6e      	ldr	r3, [pc, #440]	@ (80015ac <HAL_RCC_ClockConfig+0x1ec>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0cf      	b.n	80015a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d010      	beq.n	8001432 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	4b66      	ldr	r3, [pc, #408]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800141c:	429a      	cmp	r2, r3
 800141e:	d908      	bls.n	8001432 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001420:	4b63      	ldr	r3, [pc, #396]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	4960      	ldr	r1, [pc, #384]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 800142e:	4313      	orrs	r3, r2
 8001430:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d04c      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b03      	cmp	r3, #3
 8001444:	d107      	bne.n	8001456 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001446:	4b5a      	ldr	r3, [pc, #360]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d121      	bne.n	8001496 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e0a6      	b.n	80015a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d107      	bne.n	800146e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800145e:	4b54      	ldr	r3, [pc, #336]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d115      	bne.n	8001496 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e09a      	b.n	80015a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d107      	bne.n	8001486 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001476:	4b4e      	ldr	r3, [pc, #312]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d109      	bne.n	8001496 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e08e      	b.n	80015a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001486:	4b4a      	ldr	r3, [pc, #296]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e086      	b.n	80015a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001496:	4b46      	ldr	r3, [pc, #280]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f023 0203 	bic.w	r2, r3, #3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	4943      	ldr	r1, [pc, #268]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014a8:	f7ff f8d6 	bl	8000658 <HAL_GetTick>
 80014ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ae:	e00a      	b.n	80014c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b0:	f7ff f8d2 	bl	8000658 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e06e      	b.n	80015a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	4b3a      	ldr	r3, [pc, #232]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 020c 	and.w	r2, r3, #12
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d1eb      	bne.n	80014b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d010      	beq.n	8001506 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	4b31      	ldr	r3, [pc, #196]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d208      	bcs.n	8001506 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f4:	4b2e      	ldr	r3, [pc, #184]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	492b      	ldr	r1, [pc, #172]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001502:	4313      	orrs	r3, r2
 8001504:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001506:	4b29      	ldr	r3, [pc, #164]	@ (80015ac <HAL_RCC_ClockConfig+0x1ec>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d210      	bcs.n	8001536 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001514:	4b25      	ldr	r3, [pc, #148]	@ (80015ac <HAL_RCC_ClockConfig+0x1ec>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 0207 	bic.w	r2, r3, #7
 800151c:	4923      	ldr	r1, [pc, #140]	@ (80015ac <HAL_RCC_ClockConfig+0x1ec>)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001524:	4b21      	ldr	r3, [pc, #132]	@ (80015ac <HAL_RCC_ClockConfig+0x1ec>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d001      	beq.n	8001536 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e036      	b.n	80015a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	2b00      	cmp	r3, #0
 8001540:	d008      	beq.n	8001554 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001542:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	4918      	ldr	r1, [pc, #96]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001550:	4313      	orrs	r3, r2
 8001552:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d009      	beq.n	8001574 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001560:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4910      	ldr	r1, [pc, #64]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001570:	4313      	orrs	r3, r2
 8001572:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001574:	f000 f824 	bl	80015c0 <HAL_RCC_GetSysClockFreq>
 8001578:	4602      	mov	r2, r0
 800157a:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	490b      	ldr	r1, [pc, #44]	@ (80015b4 <HAL_RCC_ClockConfig+0x1f4>)
 8001586:	5ccb      	ldrb	r3, [r1, r3]
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	fa22 f303 	lsr.w	r3, r2, r3
 8001590:	4a09      	ldr	r2, [pc, #36]	@ (80015b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001592:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001594:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <HAL_RCC_ClockConfig+0x1fc>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fecf 	bl	800033c <HAL_InitTick>
 800159e:	4603      	mov	r3, r0
 80015a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80015a2:	7afb      	ldrb	r3, [r7, #11]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40022000 	.word	0x40022000
 80015b0:	40021000 	.word	0x40021000
 80015b4:	08003410 	.word	0x08003410
 80015b8:	20000004 	.word	0x20000004
 80015bc:	20000008 	.word	0x20000008

080015c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	@ 0x24
 80015c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ce:	4b3e      	ldr	r3, [pc, #248]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d8:	4b3b      	ldr	r3, [pc, #236]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_GetSysClockFreq+0x34>
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	2b0c      	cmp	r3, #12
 80015ec:	d121      	bne.n	8001632 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d11e      	bne.n	8001632 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80015f4:	4b34      	ldr	r3, [pc, #208]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d107      	bne.n	8001610 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001600:	4b31      	ldr	r3, [pc, #196]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001602:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001606:	0a1b      	lsrs	r3, r3, #8
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	e005      	b.n	800161c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001610:	4b2d      	ldr	r3, [pc, #180]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	091b      	lsrs	r3, r3, #4
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800161c:	4a2b      	ldr	r2, [pc, #172]	@ (80016cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001624:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10d      	bne.n	8001648 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001630:	e00a      	b.n	8001648 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	2b04      	cmp	r3, #4
 8001636:	d102      	bne.n	800163e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001638:	4b25      	ldr	r3, [pc, #148]	@ (80016d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	e004      	b.n	8001648 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	2b08      	cmp	r3, #8
 8001642:	d101      	bne.n	8001648 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001644:	4b23      	ldr	r3, [pc, #140]	@ (80016d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001646:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	2b0c      	cmp	r3, #12
 800164c:	d134      	bne.n	80016b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800164e:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d003      	beq.n	8001666 <HAL_RCC_GetSysClockFreq+0xa6>
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b03      	cmp	r3, #3
 8001662:	d003      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0xac>
 8001664:	e005      	b.n	8001672 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001666:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001668:	617b      	str	r3, [r7, #20]
      break;
 800166a:	e005      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800166c:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800166e:	617b      	str	r3, [r7, #20]
      break;
 8001670:	e002      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	617b      	str	r3, [r7, #20]
      break;
 8001676:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001678:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	3301      	adds	r3, #1
 8001684:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	fb03 f202 	mul.w	r2, r3, r2
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	fbb2 f3f3 	udiv	r3, r2, r3
 800169c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800169e:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	0e5b      	lsrs	r3, r3, #25
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	3301      	adds	r3, #1
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80016b8:	69bb      	ldr	r3, [r7, #24]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	@ 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
 80016cc:	08003428 	.word	0x08003428
 80016d0:	00f42400 	.word	0x00f42400
 80016d4:	007a1200 	.word	0x007a1200

080016d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016dc:	4b03      	ldr	r3, [pc, #12]	@ (80016ec <HAL_RCC_GetHCLKFreq+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000004 	.word	0x20000004

080016f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80016f4:	f7ff fff0 	bl	80016d8 <HAL_RCC_GetHCLKFreq>
 80016f8:	4602      	mov	r2, r0
 80016fa:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	0a1b      	lsrs	r3, r3, #8
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	4904      	ldr	r1, [pc, #16]	@ (8001718 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001706:	5ccb      	ldrb	r3, [r1, r3]
 8001708:	f003 031f 	and.w	r3, r3, #31
 800170c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001710:	4618      	mov	r0, r3
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000
 8001718:	08003420 	.word	0x08003420

0800171c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	220f      	movs	r2, #15
 800172a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800172c:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <HAL_RCC_GetClockConfig+0x5c>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 0203 	and.w	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001738:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <HAL_RCC_GetClockConfig+0x5c>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <HAL_RCC_GetClockConfig+0x5c>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001750:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <HAL_RCC_GetClockConfig+0x5c>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	08db      	lsrs	r3, r3, #3
 8001756:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <HAL_RCC_GetClockConfig+0x60>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0207 	and.w	r2, r3, #7
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	601a      	str	r2, [r3, #0]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	40022000 	.word	0x40022000

08001780 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001788:	2300      	movs	r3, #0
 800178a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800178c:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800178e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001798:	f7ff f9f0 	bl	8000b7c <HAL_PWREx_GetVoltageRange>
 800179c:	6178      	str	r0, [r7, #20]
 800179e:	e014      	b.n	80017ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017a0:	4b25      	ldr	r3, [pc, #148]	@ (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a4:	4a24      	ldr	r2, [pc, #144]	@ (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ac:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017b8:	f7ff f9e0 	bl	8000b7c <HAL_PWREx_GetVoltageRange>
 80017bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017be:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017d0:	d10b      	bne.n	80017ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b80      	cmp	r3, #128	@ 0x80
 80017d6:	d919      	bls.n	800180c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2ba0      	cmp	r3, #160	@ 0xa0
 80017dc:	d902      	bls.n	80017e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017de:	2302      	movs	r3, #2
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	e013      	b.n	800180c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017e4:	2301      	movs	r3, #1
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	e010      	b.n	800180c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b80      	cmp	r3, #128	@ 0x80
 80017ee:	d902      	bls.n	80017f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017f0:	2303      	movs	r3, #3
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	e00a      	b.n	800180c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b80      	cmp	r3, #128	@ 0x80
 80017fa:	d102      	bne.n	8001802 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017fc:	2302      	movs	r3, #2
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	e004      	b.n	800180c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b70      	cmp	r3, #112	@ 0x70
 8001806:	d101      	bne.n	800180c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001808:	2301      	movs	r3, #1
 800180a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800180c:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 0207 	bic.w	r2, r3, #7
 8001814:	4909      	ldr	r1, [pc, #36]	@ (800183c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800181c:	4b07      	ldr	r3, [pc, #28]	@ (800183c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	429a      	cmp	r2, r3
 8001828:	d001      	beq.n	800182e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000
 800183c:	40022000 	.word	0x40022000

08001840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e049      	b.n	80018e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d106      	bne.n	800186c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f841 	bl	80018ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2202      	movs	r2, #2
 8001870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3304      	adds	r3, #4
 800187c:	4619      	mov	r1, r3
 800187e:	4610      	mov	r0, r2
 8001880:	f000 f9c4 	bl	8001c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b01      	cmp	r3, #1
 8001916:	d001      	beq.n	800191c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e03b      	b.n	8001994 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2202      	movs	r2, #2
 8001920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a19      	ldr	r2, [pc, #100]	@ (80019a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d009      	beq.n	8001952 <HAL_TIM_Base_Start_IT+0x4e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001946:	d004      	beq.n	8001952 <HAL_TIM_Base_Start_IT+0x4e>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a15      	ldr	r2, [pc, #84]	@ (80019a4 <HAL_TIM_Base_Start_IT+0xa0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d115      	bne.n	800197e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <HAL_TIM_Base_Start_IT+0xa4>)
 800195a:	4013      	ands	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b06      	cmp	r3, #6
 8001962:	d015      	beq.n	8001990 <HAL_TIM_Base_Start_IT+0x8c>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800196a:	d011      	beq.n	8001990 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0201 	orr.w	r2, r2, #1
 800197a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800197c:	e008      	b.n	8001990 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 0201 	orr.w	r2, r2, #1
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e000      	b.n	8001992 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001990:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40012c00 	.word	0x40012c00
 80019a4:	40014000 	.word	0x40014000
 80019a8:	00010007 	.word	0x00010007

080019ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d020      	beq.n	8001a10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d01b      	beq.n	8001a10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f06f 0202 	mvn.w	r2, #2
 80019e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f8e9 	bl	8001bce <HAL_TIM_IC_CaptureCallback>
 80019fc:	e005      	b.n	8001a0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f8db 	bl	8001bba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f8ec 	bl	8001be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d020      	beq.n	8001a5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d01b      	beq.n	8001a5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 0204 	mvn.w	r2, #4
 8001a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2202      	movs	r2, #2
 8001a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f8c3 	bl	8001bce <HAL_TIM_IC_CaptureCallback>
 8001a48:	e005      	b.n	8001a56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f8b5 	bl	8001bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f8c6 	bl	8001be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d020      	beq.n	8001aa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d01b      	beq.n	8001aa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f06f 0208 	mvn.w	r2, #8
 8001a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f89d 	bl	8001bce <HAL_TIM_IC_CaptureCallback>
 8001a94:	e005      	b.n	8001aa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f88f 	bl	8001bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f8a0 	bl	8001be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d020      	beq.n	8001af4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f003 0310 	and.w	r3, r3, #16
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d01b      	beq.n	8001af4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f06f 0210 	mvn.w	r2, #16
 8001ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2208      	movs	r2, #8
 8001aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f877 	bl	8001bce <HAL_TIM_IC_CaptureCallback>
 8001ae0:	e005      	b.n	8001aee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f869 	bl	8001bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f87a 	bl	8001be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00c      	beq.n	8001b18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d007      	beq.n	8001b18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f06f 0201 	mvn.w	r2, #1
 8001b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7fe fc96 	bl	8000444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d104      	bne.n	8001b2c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00c      	beq.n	8001b46 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d007      	beq.n	8001b46 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f8dd 	bl	8001d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00c      	beq.n	8001b6a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d007      	beq.n	8001b6a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f8d5 	bl	8001d14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00c      	beq.n	8001b8e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d007      	beq.n	8001b8e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f834 	bl	8001bf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	f003 0320 	and.w	r3, r3, #32
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00c      	beq.n	8001bb2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f06f 0220 	mvn.w	r2, #32
 8001baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f89d 	bl	8001cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a30      	ldr	r2, [pc, #192]	@ (8001ce0 <TIM_Base_SetConfig+0xd4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d003      	beq.n	8001c2c <TIM_Base_SetConfig+0x20>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c2a:	d108      	bne.n	8001c3e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a27      	ldr	r2, [pc, #156]	@ (8001ce0 <TIM_Base_SetConfig+0xd4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00b      	beq.n	8001c5e <TIM_Base_SetConfig+0x52>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c4c:	d007      	beq.n	8001c5e <TIM_Base_SetConfig+0x52>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a24      	ldr	r2, [pc, #144]	@ (8001ce4 <TIM_Base_SetConfig+0xd8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d003      	beq.n	8001c5e <TIM_Base_SetConfig+0x52>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a23      	ldr	r2, [pc, #140]	@ (8001ce8 <TIM_Base_SetConfig+0xdc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d108      	bne.n	8001c70 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a12      	ldr	r2, [pc, #72]	@ (8001ce0 <TIM_Base_SetConfig+0xd4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d007      	beq.n	8001cac <TIM_Base_SetConfig+0xa0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a11      	ldr	r2, [pc, #68]	@ (8001ce4 <TIM_Base_SetConfig+0xd8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d003      	beq.n	8001cac <TIM_Base_SetConfig+0xa0>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a10      	ldr	r2, [pc, #64]	@ (8001ce8 <TIM_Base_SetConfig+0xdc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d103      	bne.n	8001cb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d105      	bne.n	8001cd2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f023 0201 	bic.w	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	611a      	str	r2, [r3, #16]
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40012c00 	.word	0x40012c00
 8001ce4:	40014000 	.word	0x40014000
 8001ce8:	40014400 	.word	0x40014400

08001cec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d2e:	f3ef 8305 	mrs	r3, IPSR
 8001d32:	607b      	str	r3, [r7, #4]
  return(result);
 8001d34:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	bf14      	ite	ne
 8001d3a:	2301      	movne	r3, #1
 8001d3c:	2300      	moveq	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001d50:	f000 fa5e 	bl	8002210 <vTaskStartScheduler>
  
  return osOK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8001d5e:	f7ff ffe3 	bl	8001d28 <inHandlerMode>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8001d68:	f000 fb56 	bl	8002418 <xTaskGetTickCountFromISR>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	e002      	b.n	8001d76 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8001d70:	f000 fb42 	bl	80023f8 <xTaskGetTickCount>
 8001d74:	4603      	mov	r3, r0
  }
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <osDelay+0x16>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	e000      	b.n	8001d92 <osDelay+0x18>
 8001d90:	2301      	movs	r3, #1
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fa06 	bl	80021a4 <vTaskDelay>
  
  return osOK;
 8001d98:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001da6:	f000 fd17 	bl	80027d8 <xTaskGetSchedulerState>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d001      	beq.n	8001db4 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8001db0:	f000 ff42 	bl	8002c38 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f103 0208 	add.w	r2, r3, #8
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f103 0208 	add.w	r2, r3, #8
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f103 0208 	add.w	r2, r3, #8
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	601a      	str	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b085      	sub	sp, #20
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d103      	bne.n	8001e7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	e00c      	b.n	8001e94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3308      	adds	r3, #8
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	e002      	b.n	8001e88 <vListInsert+0x2e>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d2f6      	bcs.n	8001e82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	601a      	str	r2, [r3, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6892      	ldr	r2, [r2, #8]
 8001ee2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6852      	ldr	r2, [r2, #4]
 8001eec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d103      	bne.n	8001f00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	1e5a      	subs	r2, r3, #1
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08c      	sub	sp, #48	@ 0x30
 8001f24:	af04      	add	r7, sp, #16
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 ff11 	bl	8002d5c <pvPortMalloc>
 8001f3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00e      	beq.n	8001f60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001f42:	205c      	movs	r0, #92	@ 0x5c
 8001f44:	f000 ff0a 	bl	8002d5c <pvPortMalloc>
 8001f48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f56:	e005      	b.n	8001f64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001f58:	6978      	ldr	r0, [r7, #20]
 8001f5a:	f000 ffcd 	bl	8002ef8 <vPortFree>
 8001f5e:	e001      	b.n	8001f64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d013      	beq.n	8001f92 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001f6a:	88fa      	ldrh	r2, [r7, #6]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	9303      	str	r3, [sp, #12]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	9302      	str	r3, [sp, #8]
 8001f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f76:	9301      	str	r3, [sp, #4]
 8001f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 f80e 	bl	8001fa2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001f86:	69f8      	ldr	r0, [r7, #28]
 8001f88:	f000 f89c 	bl	80020c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	61bb      	str	r3, [r7, #24]
 8001f90:	e002      	b.n	8001f98 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001f98:	69bb      	ldr	r3, [r7, #24]
	}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3720      	adds	r7, #32
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b088      	sub	sp, #32
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	461a      	mov	r2, r3
 8001fba:	21a5      	movs	r1, #165	@ 0xa5
 8001fbc:	f001 f9ec 	bl	8003398 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	f023 0307 	bic.w	r3, r3, #7
 8001fd8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00b      	beq.n	8001ffc <prvInitialiseNewTask+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fe8:	f383 8811 	msr	BASEPRI, r3
 8001fec:	f3bf 8f6f 	isb	sy
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d01f      	beq.n	8002042 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e012      	b.n	800202e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	4413      	add	r3, r2
 800200e:	7819      	ldrb	r1, [r3, #0]
 8002010:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	4413      	add	r3, r2
 8002016:	3334      	adds	r3, #52	@ 0x34
 8002018:	460a      	mov	r2, r1
 800201a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	4413      	add	r3, r2
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	3301      	adds	r3, #1
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	2b0f      	cmp	r3, #15
 8002032:	d9e9      	bls.n	8002008 <prvInitialiseNewTask+0x66>
 8002034:	e000      	b.n	8002038 <prvInitialiseNewTask+0x96>
			{
				break;
 8002036:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002040:	e003      	b.n	800204a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800204a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204c:	2bff      	cmp	r3, #255	@ 0xff
 800204e:	d901      	bls.n	8002054 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002050:	23ff      	movs	r3, #255	@ 0xff
 8002052:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002056:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002058:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800205a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800205c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800205e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002062:	2200      	movs	r2, #0
 8002064:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002068:	3304      	adds	r3, #4
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fec4 	bl	8001df8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002072:	3318      	adds	r3, #24
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff febf 	bl	8001df8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800207a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800207c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800207e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002082:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 8002086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002088:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800208a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800208c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800208e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002092:	2200      	movs	r2, #0
 8002094:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	68f9      	ldr	r1, [r7, #12]
 80020a2:	69b8      	ldr	r0, [r7, #24]
 80020a4:	f000 fc0a 	bl	80028bc <pxPortInitialiseStack>
 80020a8:	4602      	mov	r2, r0
 80020aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80020ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80020b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80020ba:	bf00      	nop
 80020bc:	3720      	adds	r7, #32
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80020cc:	f000 fd24 	bl	8002b18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80020d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002188 <prvAddNewTaskToReadyList+0xc4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3301      	adds	r3, #1
 80020d6:	4a2c      	ldr	r2, [pc, #176]	@ (8002188 <prvAddNewTaskToReadyList+0xc4>)
 80020d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80020da:	4b2c      	ldr	r3, [pc, #176]	@ (800218c <prvAddNewTaskToReadyList+0xc8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80020e2:	4a2a      	ldr	r2, [pc, #168]	@ (800218c <prvAddNewTaskToReadyList+0xc8>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80020e8:	4b27      	ldr	r3, [pc, #156]	@ (8002188 <prvAddNewTaskToReadyList+0xc4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d110      	bne.n	8002112 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80020f0:	f000 fad4 	bl	800269c <prvInitialiseTaskLists>
 80020f4:	e00d      	b.n	8002112 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80020f6:	4b26      	ldr	r3, [pc, #152]	@ (8002190 <prvAddNewTaskToReadyList+0xcc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80020fe:	4b23      	ldr	r3, [pc, #140]	@ (800218c <prvAddNewTaskToReadyList+0xc8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002108:	429a      	cmp	r2, r3
 800210a:	d802      	bhi.n	8002112 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800210c:	4a1f      	ldr	r2, [pc, #124]	@ (800218c <prvAddNewTaskToReadyList+0xc8>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002112:	4b20      	ldr	r3, [pc, #128]	@ (8002194 <prvAddNewTaskToReadyList+0xd0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	3301      	adds	r3, #1
 8002118:	4a1e      	ldr	r2, [pc, #120]	@ (8002194 <prvAddNewTaskToReadyList+0xd0>)
 800211a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800211c:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <prvAddNewTaskToReadyList+0xd0>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002128:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <prvAddNewTaskToReadyList+0xd4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d903      	bls.n	8002138 <prvAddNewTaskToReadyList+0x74>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002134:	4a18      	ldr	r2, [pc, #96]	@ (8002198 <prvAddNewTaskToReadyList+0xd4>)
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4a15      	ldr	r2, [pc, #84]	@ (800219c <prvAddNewTaskToReadyList+0xd8>)
 8002146:	441a      	add	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3304      	adds	r3, #4
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f7ff fe5f 	bl	8001e12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002154:	f000 fd12 	bl	8002b7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002158:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <prvAddNewTaskToReadyList+0xcc>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00e      	beq.n	800217e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002160:	4b0a      	ldr	r3, [pc, #40]	@ (800218c <prvAddNewTaskToReadyList+0xc8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216a:	429a      	cmp	r2, r3
 800216c:	d207      	bcs.n	800217e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800216e:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <prvAddNewTaskToReadyList+0xdc>)
 8002170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	f3bf 8f4f 	dsb	sy
 800217a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200014fc 	.word	0x200014fc
 800218c:	20000088 	.word	0x20000088
 8002190:	20001508 	.word	0x20001508
 8002194:	20001518 	.word	0x20001518
 8002198:	20001504 	.word	0x20001504
 800219c:	2000008c 	.word	0x2000008c
 80021a0:	e000ed04 	.word	0xe000ed04

080021a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d018      	beq.n	80021e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80021b6:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <vTaskDelay+0x64>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <vTaskDelay+0x32>
	__asm volatile
 80021be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021c2:	f383 8811 	msr	BASEPRI, r3
 80021c6:	f3bf 8f6f 	isb	sy
 80021ca:	f3bf 8f4f 	dsb	sy
 80021ce:	60bb      	str	r3, [r7, #8]
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	e7fd      	b.n	80021d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80021d6:	f000 f863 	bl	80022a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80021da:	2100      	movs	r1, #0
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 fb19 	bl	8002814 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80021e2:	f000 f86b 	bl	80022bc <xTaskResumeAll>
 80021e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d107      	bne.n	80021fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80021ee:	4b07      	ldr	r3, [pc, #28]	@ (800220c <vTaskDelay+0x68>)
 80021f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	f3bf 8f4f 	dsb	sy
 80021fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20001524 	.word	0x20001524
 800220c:	e000ed04 	.word	0xe000ed04

08002210 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002216:	4b1c      	ldr	r3, [pc, #112]	@ (8002288 <vTaskStartScheduler+0x78>)
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	2300      	movs	r3, #0
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	2300      	movs	r3, #0
 8002220:	2280      	movs	r2, #128	@ 0x80
 8002222:	491a      	ldr	r1, [pc, #104]	@ (800228c <vTaskStartScheduler+0x7c>)
 8002224:	481a      	ldr	r0, [pc, #104]	@ (8002290 <vTaskStartScheduler+0x80>)
 8002226:	f7ff fe7b 	bl	8001f20 <xTaskCreate>
 800222a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d116      	bne.n	8002260 <vTaskStartScheduler+0x50>
	__asm volatile
 8002232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002236:	f383 8811 	msr	BASEPRI, r3
 800223a:	f3bf 8f6f 	isb	sy
 800223e:	f3bf 8f4f 	dsb	sy
 8002242:	60bb      	str	r3, [r7, #8]
}
 8002244:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002246:	4b13      	ldr	r3, [pc, #76]	@ (8002294 <vTaskStartScheduler+0x84>)
 8002248:	f04f 32ff 	mov.w	r2, #4294967295
 800224c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800224e:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <vTaskStartScheduler+0x88>)
 8002250:	2201      	movs	r2, #1
 8002252:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002254:	4b11      	ldr	r3, [pc, #68]	@ (800229c <vTaskStartScheduler+0x8c>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800225a:	f000 fbb9 	bl	80029d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800225e:	e00f      	b.n	8002280 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002266:	d10b      	bne.n	8002280 <vTaskStartScheduler+0x70>
	__asm volatile
 8002268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800226c:	f383 8811 	msr	BASEPRI, r3
 8002270:	f3bf 8f6f 	isb	sy
 8002274:	f3bf 8f4f 	dsb	sy
 8002278:	607b      	str	r3, [r7, #4]
}
 800227a:	bf00      	nop
 800227c:	bf00      	nop
 800227e:	e7fd      	b.n	800227c <vTaskStartScheduler+0x6c>
}
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20001520 	.word	0x20001520
 800228c:	08003408 	.word	0x08003408
 8002290:	0800266d 	.word	0x0800266d
 8002294:	2000151c 	.word	0x2000151c
 8002298:	20001508 	.word	0x20001508
 800229c:	20001500 	.word	0x20001500

080022a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80022a4:	4b04      	ldr	r3, [pc, #16]	@ (80022b8 <vTaskSuspendAll+0x18>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	3301      	adds	r3, #1
 80022aa:	4a03      	ldr	r2, [pc, #12]	@ (80022b8 <vTaskSuspendAll+0x18>)
 80022ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80022ae:	bf00      	nop
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	20001524 	.word	0x20001524

080022bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80022ca:	4b42      	ldr	r3, [pc, #264]	@ (80023d4 <xTaskResumeAll+0x118>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10b      	bne.n	80022ea <xTaskResumeAll+0x2e>
	__asm volatile
 80022d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022d6:	f383 8811 	msr	BASEPRI, r3
 80022da:	f3bf 8f6f 	isb	sy
 80022de:	f3bf 8f4f 	dsb	sy
 80022e2:	603b      	str	r3, [r7, #0]
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	e7fd      	b.n	80022e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80022ea:	f000 fc15 	bl	8002b18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80022ee:	4b39      	ldr	r3, [pc, #228]	@ (80023d4 <xTaskResumeAll+0x118>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	4a37      	ldr	r2, [pc, #220]	@ (80023d4 <xTaskResumeAll+0x118>)
 80022f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022f8:	4b36      	ldr	r3, [pc, #216]	@ (80023d4 <xTaskResumeAll+0x118>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d162      	bne.n	80023c6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002300:	4b35      	ldr	r3, [pc, #212]	@ (80023d8 <xTaskResumeAll+0x11c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d05e      	beq.n	80023c6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002308:	e02f      	b.n	800236a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800230a:	4b34      	ldr	r3, [pc, #208]	@ (80023dc <xTaskResumeAll+0x120>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3318      	adds	r3, #24
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fdd8 	bl	8001ecc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3304      	adds	r3, #4
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fdd3 	bl	8001ecc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800232a:	4b2d      	ldr	r3, [pc, #180]	@ (80023e0 <xTaskResumeAll+0x124>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d903      	bls.n	800233a <xTaskResumeAll+0x7e>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002336:	4a2a      	ldr	r2, [pc, #168]	@ (80023e0 <xTaskResumeAll+0x124>)
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4a27      	ldr	r2, [pc, #156]	@ (80023e4 <xTaskResumeAll+0x128>)
 8002348:	441a      	add	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3304      	adds	r3, #4
 800234e:	4619      	mov	r1, r3
 8002350:	4610      	mov	r0, r2
 8002352:	f7ff fd5e 	bl	8001e12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800235a:	4b23      	ldr	r3, [pc, #140]	@ (80023e8 <xTaskResumeAll+0x12c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002360:	429a      	cmp	r2, r3
 8002362:	d302      	bcc.n	800236a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002364:	4b21      	ldr	r3, [pc, #132]	@ (80023ec <xTaskResumeAll+0x130>)
 8002366:	2201      	movs	r2, #1
 8002368:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800236a:	4b1c      	ldr	r3, [pc, #112]	@ (80023dc <xTaskResumeAll+0x120>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1cb      	bne.n	800230a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002378:	f000 fa0e 	bl	8002798 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800237c:	4b1c      	ldr	r3, [pc, #112]	@ (80023f0 <xTaskResumeAll+0x134>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d010      	beq.n	80023aa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002388:	f000 f858 	bl	800243c <xTaskIncrementTick>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002392:	4b16      	ldr	r3, [pc, #88]	@ (80023ec <xTaskResumeAll+0x130>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1f1      	bne.n	8002388 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80023a4:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <xTaskResumeAll+0x134>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80023aa:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <xTaskResumeAll+0x130>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80023b2:	2301      	movs	r3, #1
 80023b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80023b6:	4b0f      	ldr	r3, [pc, #60]	@ (80023f4 <xTaskResumeAll+0x138>)
 80023b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	f3bf 8f4f 	dsb	sy
 80023c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80023c6:	f000 fbd9 	bl	8002b7c <vPortExitCritical>

	return xAlreadyYielded;
 80023ca:	68bb      	ldr	r3, [r7, #8]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20001524 	.word	0x20001524
 80023d8:	200014fc 	.word	0x200014fc
 80023dc:	200014bc 	.word	0x200014bc
 80023e0:	20001504 	.word	0x20001504
 80023e4:	2000008c 	.word	0x2000008c
 80023e8:	20000088 	.word	0x20000088
 80023ec:	20001510 	.word	0x20001510
 80023f0:	2000150c 	.word	0x2000150c
 80023f4:	e000ed04 	.word	0xe000ed04

080023f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80023fe:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <xTaskGetTickCount+0x1c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002404:	687b      	ldr	r3, [r7, #4]
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20001500 	.word	0x20001500

08002418 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800241e:	f000 fc5b 	bl	8002cd8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8002426:	4b04      	ldr	r3, [pc, #16]	@ (8002438 <xTaskGetTickCountFromISR+0x20>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800242c:	683b      	ldr	r3, [r7, #0]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20001500 	.word	0x20001500

0800243c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002446:	4b4f      	ldr	r3, [pc, #316]	@ (8002584 <xTaskIncrementTick+0x148>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f040 8090 	bne.w	8002570 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002450:	4b4d      	ldr	r3, [pc, #308]	@ (8002588 <xTaskIncrementTick+0x14c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002458:	4a4b      	ldr	r2, [pc, #300]	@ (8002588 <xTaskIncrementTick+0x14c>)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d121      	bne.n	80024a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002464:	4b49      	ldr	r3, [pc, #292]	@ (800258c <xTaskIncrementTick+0x150>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00b      	beq.n	8002486 <xTaskIncrementTick+0x4a>
	__asm volatile
 800246e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002472:	f383 8811 	msr	BASEPRI, r3
 8002476:	f3bf 8f6f 	isb	sy
 800247a:	f3bf 8f4f 	dsb	sy
 800247e:	603b      	str	r3, [r7, #0]
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	e7fd      	b.n	8002482 <xTaskIncrementTick+0x46>
 8002486:	4b41      	ldr	r3, [pc, #260]	@ (800258c <xTaskIncrementTick+0x150>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	4b40      	ldr	r3, [pc, #256]	@ (8002590 <xTaskIncrementTick+0x154>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a3e      	ldr	r2, [pc, #248]	@ (800258c <xTaskIncrementTick+0x150>)
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4a3e      	ldr	r2, [pc, #248]	@ (8002590 <xTaskIncrementTick+0x154>)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b3e      	ldr	r3, [pc, #248]	@ (8002594 <xTaskIncrementTick+0x158>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	3301      	adds	r3, #1
 80024a0:	4a3c      	ldr	r2, [pc, #240]	@ (8002594 <xTaskIncrementTick+0x158>)
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	f000 f978 	bl	8002798 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80024a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002598 <xTaskIncrementTick+0x15c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d349      	bcc.n	8002546 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024b2:	4b36      	ldr	r3, [pc, #216]	@ (800258c <xTaskIncrementTick+0x150>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d104      	bne.n	80024c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024bc:	4b36      	ldr	r3, [pc, #216]	@ (8002598 <xTaskIncrementTick+0x15c>)
 80024be:	f04f 32ff 	mov.w	r2, #4294967295
 80024c2:	601a      	str	r2, [r3, #0]
					break;
 80024c4:	e03f      	b.n	8002546 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024c6:	4b31      	ldr	r3, [pc, #196]	@ (800258c <xTaskIncrementTick+0x150>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d203      	bcs.n	80024e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80024de:	4a2e      	ldr	r2, [pc, #184]	@ (8002598 <xTaskIncrementTick+0x15c>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80024e4:	e02f      	b.n	8002546 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	3304      	adds	r3, #4
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fcee 	bl	8001ecc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	3318      	adds	r3, #24
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fce5 	bl	8001ecc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002506:	4b25      	ldr	r3, [pc, #148]	@ (800259c <xTaskIncrementTick+0x160>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d903      	bls.n	8002516 <xTaskIncrementTick+0xda>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002512:	4a22      	ldr	r2, [pc, #136]	@ (800259c <xTaskIncrementTick+0x160>)
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4a1f      	ldr	r2, [pc, #124]	@ (80025a0 <xTaskIncrementTick+0x164>)
 8002524:	441a      	add	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	3304      	adds	r3, #4
 800252a:	4619      	mov	r1, r3
 800252c:	4610      	mov	r0, r2
 800252e:	f7ff fc70 	bl	8001e12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002536:	4b1b      	ldr	r3, [pc, #108]	@ (80025a4 <xTaskIncrementTick+0x168>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253c:	429a      	cmp	r2, r3
 800253e:	d3b8      	bcc.n	80024b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002540:	2301      	movs	r3, #1
 8002542:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002544:	e7b5      	b.n	80024b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002546:	4b17      	ldr	r3, [pc, #92]	@ (80025a4 <xTaskIncrementTick+0x168>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800254c:	4914      	ldr	r1, [pc, #80]	@ (80025a0 <xTaskIncrementTick+0x164>)
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d901      	bls.n	8002562 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800255e:	2301      	movs	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002562:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <xTaskIncrementTick+0x16c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d007      	beq.n	800257a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800256a:	2301      	movs	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	e004      	b.n	800257a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002570:	4b0e      	ldr	r3, [pc, #56]	@ (80025ac <xTaskIncrementTick+0x170>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3301      	adds	r3, #1
 8002576:	4a0d      	ldr	r2, [pc, #52]	@ (80025ac <xTaskIncrementTick+0x170>)
 8002578:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800257a:	697b      	ldr	r3, [r7, #20]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20001524 	.word	0x20001524
 8002588:	20001500 	.word	0x20001500
 800258c:	200014b4 	.word	0x200014b4
 8002590:	200014b8 	.word	0x200014b8
 8002594:	20001514 	.word	0x20001514
 8002598:	2000151c 	.word	0x2000151c
 800259c:	20001504 	.word	0x20001504
 80025a0:	2000008c 	.word	0x2000008c
 80025a4:	20000088 	.word	0x20000088
 80025a8:	20001510 	.word	0x20001510
 80025ac:	2000150c 	.word	0x2000150c

080025b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80025b6:	4b28      	ldr	r3, [pc, #160]	@ (8002658 <vTaskSwitchContext+0xa8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80025be:	4b27      	ldr	r3, [pc, #156]	@ (800265c <vTaskSwitchContext+0xac>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80025c4:	e042      	b.n	800264c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80025c6:	4b25      	ldr	r3, [pc, #148]	@ (800265c <vTaskSwitchContext+0xac>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025cc:	4b24      	ldr	r3, [pc, #144]	@ (8002660 <vTaskSwitchContext+0xb0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	e011      	b.n	80025f8 <vTaskSwitchContext+0x48>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10b      	bne.n	80025f2 <vTaskSwitchContext+0x42>
	__asm volatile
 80025da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025de:	f383 8811 	msr	BASEPRI, r3
 80025e2:	f3bf 8f6f 	isb	sy
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	607b      	str	r3, [r7, #4]
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	e7fd      	b.n	80025ee <vTaskSwitchContext+0x3e>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	491a      	ldr	r1, [pc, #104]	@ (8002664 <vTaskSwitchContext+0xb4>)
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0e3      	beq.n	80025d4 <vTaskSwitchContext+0x24>
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4a13      	ldr	r2, [pc, #76]	@ (8002664 <vTaskSwitchContext+0xb4>)
 8002618:	4413      	add	r3, r2
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	3308      	adds	r3, #8
 800262e:	429a      	cmp	r2, r3
 8002630:	d104      	bne.n	800263c <vTaskSwitchContext+0x8c>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	4a09      	ldr	r2, [pc, #36]	@ (8002668 <vTaskSwitchContext+0xb8>)
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	4a06      	ldr	r2, [pc, #24]	@ (8002660 <vTaskSwitchContext+0xb0>)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6013      	str	r3, [r2, #0]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	20001524 	.word	0x20001524
 800265c:	20001510 	.word	0x20001510
 8002660:	20001504 	.word	0x20001504
 8002664:	2000008c 	.word	0x2000008c
 8002668:	20000088 	.word	0x20000088

0800266c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002674:	f000 f852 	bl	800271c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002678:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <prvIdleTask+0x28>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d9f9      	bls.n	8002674 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002680:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <prvIdleTask+0x2c>)
 8002682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002690:	e7f0      	b.n	8002674 <prvIdleTask+0x8>
 8002692:	bf00      	nop
 8002694:	2000008c 	.word	0x2000008c
 8002698:	e000ed04 	.word	0xe000ed04

0800269c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	e00c      	b.n	80026c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4a12      	ldr	r2, [pc, #72]	@ (80026fc <prvInitialiseTaskLists+0x60>)
 80026b4:	4413      	add	r3, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fb7e 	bl	8001db8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3301      	adds	r3, #1
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2bff      	cmp	r3, #255	@ 0xff
 80026c6:	d9ef      	bls.n	80026a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80026c8:	480d      	ldr	r0, [pc, #52]	@ (8002700 <prvInitialiseTaskLists+0x64>)
 80026ca:	f7ff fb75 	bl	8001db8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80026ce:	480d      	ldr	r0, [pc, #52]	@ (8002704 <prvInitialiseTaskLists+0x68>)
 80026d0:	f7ff fb72 	bl	8001db8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80026d4:	480c      	ldr	r0, [pc, #48]	@ (8002708 <prvInitialiseTaskLists+0x6c>)
 80026d6:	f7ff fb6f 	bl	8001db8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80026da:	480c      	ldr	r0, [pc, #48]	@ (800270c <prvInitialiseTaskLists+0x70>)
 80026dc:	f7ff fb6c 	bl	8001db8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80026e0:	480b      	ldr	r0, [pc, #44]	@ (8002710 <prvInitialiseTaskLists+0x74>)
 80026e2:	f7ff fb69 	bl	8001db8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80026e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <prvInitialiseTaskLists+0x78>)
 80026e8:	4a05      	ldr	r2, [pc, #20]	@ (8002700 <prvInitialiseTaskLists+0x64>)
 80026ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80026ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <prvInitialiseTaskLists+0x7c>)
 80026ee:	4a05      	ldr	r2, [pc, #20]	@ (8002704 <prvInitialiseTaskLists+0x68>)
 80026f0:	601a      	str	r2, [r3, #0]
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	2000008c 	.word	0x2000008c
 8002700:	2000148c 	.word	0x2000148c
 8002704:	200014a0 	.word	0x200014a0
 8002708:	200014bc 	.word	0x200014bc
 800270c:	200014d0 	.word	0x200014d0
 8002710:	200014e8 	.word	0x200014e8
 8002714:	200014b4 	.word	0x200014b4
 8002718:	200014b8 	.word	0x200014b8

0800271c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002722:	e019      	b.n	8002758 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002724:	f000 f9f8 	bl	8002b18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002728:	4b10      	ldr	r3, [pc, #64]	@ (800276c <prvCheckTasksWaitingTermination+0x50>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3304      	adds	r3, #4
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fbc9 	bl	8001ecc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800273a:	4b0d      	ldr	r3, [pc, #52]	@ (8002770 <prvCheckTasksWaitingTermination+0x54>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3b01      	subs	r3, #1
 8002740:	4a0b      	ldr	r2, [pc, #44]	@ (8002770 <prvCheckTasksWaitingTermination+0x54>)
 8002742:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002744:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <prvCheckTasksWaitingTermination+0x58>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3b01      	subs	r3, #1
 800274a:	4a0a      	ldr	r2, [pc, #40]	@ (8002774 <prvCheckTasksWaitingTermination+0x58>)
 800274c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800274e:	f000 fa15 	bl	8002b7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f810 	bl	8002778 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002758:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <prvCheckTasksWaitingTermination+0x58>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e1      	bne.n	8002724 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200014d0 	.word	0x200014d0
 8002770:	200014fc 	.word	0x200014fc
 8002774:	200014e4 	.word	0x200014e4

08002778 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002784:	4618      	mov	r0, r3
 8002786:	f000 fbb7 	bl	8002ef8 <vPortFree>
			vPortFree( pxTCB );
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fbb4 	bl	8002ef8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800279e:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <prvResetNextTaskUnblockTime+0x38>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d104      	bne.n	80027b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80027a8:	4b0a      	ldr	r3, [pc, #40]	@ (80027d4 <prvResetNextTaskUnblockTime+0x3c>)
 80027aa:	f04f 32ff 	mov.w	r2, #4294967295
 80027ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80027b0:	e008      	b.n	80027c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027b2:	4b07      	ldr	r3, [pc, #28]	@ (80027d0 <prvResetNextTaskUnblockTime+0x38>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4a04      	ldr	r2, [pc, #16]	@ (80027d4 <prvResetNextTaskUnblockTime+0x3c>)
 80027c2:	6013      	str	r3, [r2, #0]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	200014b4 	.word	0x200014b4
 80027d4:	2000151c 	.word	0x2000151c

080027d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80027de:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <xTaskGetSchedulerState+0x34>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80027e6:	2301      	movs	r3, #1
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	e008      	b.n	80027fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027ec:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <xTaskGetSchedulerState+0x38>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80027f4:	2302      	movs	r3, #2
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	e001      	b.n	80027fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80027fe:	687b      	ldr	r3, [r7, #4]
	}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	20001508 	.word	0x20001508
 8002810:	20001524 	.word	0x20001524

08002814 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800281e:	4b21      	ldr	r3, [pc, #132]	@ (80028a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002824:	4b20      	ldr	r3, [pc, #128]	@ (80028a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3304      	adds	r3, #4
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fb4e 	bl	8001ecc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d10a      	bne.n	800284e <prvAddCurrentTaskToDelayedList+0x3a>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800283e:	4b1a      	ldr	r3, [pc, #104]	@ (80028a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3304      	adds	r3, #4
 8002844:	4619      	mov	r1, r3
 8002846:	4819      	ldr	r0, [pc, #100]	@ (80028ac <prvAddCurrentTaskToDelayedList+0x98>)
 8002848:	f7ff fae3 	bl	8001e12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800284c:	e026      	b.n	800289c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4413      	add	r3, r2
 8002854:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002856:	4b14      	ldr	r3, [pc, #80]	@ (80028a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	429a      	cmp	r2, r3
 8002864:	d209      	bcs.n	800287a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002866:	4b12      	ldr	r3, [pc, #72]	@ (80028b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	4b0f      	ldr	r3, [pc, #60]	@ (80028a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3304      	adds	r3, #4
 8002870:	4619      	mov	r1, r3
 8002872:	4610      	mov	r0, r2
 8002874:	f7ff faf1 	bl	8001e5a <vListInsert>
}
 8002878:	e010      	b.n	800289c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800287a:	4b0e      	ldr	r3, [pc, #56]	@ (80028b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	4b0a      	ldr	r3, [pc, #40]	@ (80028a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3304      	adds	r3, #4
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f7ff fae7 	bl	8001e5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800288c:	4b0a      	ldr	r3, [pc, #40]	@ (80028b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	429a      	cmp	r2, r3
 8002894:	d202      	bcs.n	800289c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002896:	4a08      	ldr	r2, [pc, #32]	@ (80028b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	6013      	str	r3, [r2, #0]
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20001500 	.word	0x20001500
 80028a8:	20000088 	.word	0x20000088
 80028ac:	200014e8 	.word	0x200014e8
 80028b0:	200014b8 	.word	0x200014b8
 80028b4:	200014b4 	.word	0x200014b4
 80028b8:	2000151c 	.word	0x2000151c

080028bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	3b04      	subs	r3, #4
 80028cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3b04      	subs	r3, #4
 80028da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f023 0201 	bic.w	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3b04      	subs	r3, #4
 80028ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80028ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002920 <pxPortInitialiseStack+0x64>)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	3b14      	subs	r3, #20
 80028f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3b04      	subs	r3, #4
 8002902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f06f 0202 	mvn.w	r2, #2
 800290a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3b20      	subs	r3, #32
 8002910:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002912:	68fb      	ldr	r3, [r7, #12]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	08002925 	.word	0x08002925

08002924 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800292e:	4b13      	ldr	r3, [pc, #76]	@ (800297c <prvTaskExitError+0x58>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002936:	d00b      	beq.n	8002950 <prvTaskExitError+0x2c>
	__asm volatile
 8002938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800293c:	f383 8811 	msr	BASEPRI, r3
 8002940:	f3bf 8f6f 	isb	sy
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	60fb      	str	r3, [r7, #12]
}
 800294a:	bf00      	nop
 800294c:	bf00      	nop
 800294e:	e7fd      	b.n	800294c <prvTaskExitError+0x28>
	__asm volatile
 8002950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	60bb      	str	r3, [r7, #8]
}
 8002962:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002964:	bf00      	nop
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0fc      	beq.n	8002966 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000010 	.word	0x20000010

08002980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002980:	4b07      	ldr	r3, [pc, #28]	@ (80029a0 <pxCurrentTCBConst2>)
 8002982:	6819      	ldr	r1, [r3, #0]
 8002984:	6808      	ldr	r0, [r1, #0]
 8002986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800298a:	f380 8809 	msr	PSP, r0
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f04f 0000 	mov.w	r0, #0
 8002996:	f380 8811 	msr	BASEPRI, r0
 800299a:	4770      	bx	lr
 800299c:	f3af 8000 	nop.w

080029a0 <pxCurrentTCBConst2>:
 80029a0:	20000088 	.word	0x20000088
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop

080029a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80029a8:	4808      	ldr	r0, [pc, #32]	@ (80029cc <prvPortStartFirstTask+0x24>)
 80029aa:	6800      	ldr	r0, [r0, #0]
 80029ac:	6800      	ldr	r0, [r0, #0]
 80029ae:	f380 8808 	msr	MSP, r0
 80029b2:	f04f 0000 	mov.w	r0, #0
 80029b6:	f380 8814 	msr	CONTROL, r0
 80029ba:	b662      	cpsie	i
 80029bc:	b661      	cpsie	f
 80029be:	f3bf 8f4f 	dsb	sy
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	df00      	svc	0
 80029c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80029ca:	bf00      	nop
 80029cc:	e000ed08 	.word	0xe000ed08

080029d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80029d6:	4b47      	ldr	r3, [pc, #284]	@ (8002af4 <xPortStartScheduler+0x124>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a47      	ldr	r2, [pc, #284]	@ (8002af8 <xPortStartScheduler+0x128>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d10b      	bne.n	80029f8 <xPortStartScheduler+0x28>
	__asm volatile
 80029e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	60fb      	str	r3, [r7, #12]
}
 80029f2:	bf00      	nop
 80029f4:	bf00      	nop
 80029f6:	e7fd      	b.n	80029f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80029f8:	4b3e      	ldr	r3, [pc, #248]	@ (8002af4 <xPortStartScheduler+0x124>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a3f      	ldr	r2, [pc, #252]	@ (8002afc <xPortStartScheduler+0x12c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10b      	bne.n	8002a1a <xPortStartScheduler+0x4a>
	__asm volatile
 8002a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	613b      	str	r3, [r7, #16]
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	e7fd      	b.n	8002a16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a1a:	4b39      	ldr	r3, [pc, #228]	@ (8002b00 <xPortStartScheduler+0x130>)
 8002a1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	22ff      	movs	r2, #255	@ 0xff
 8002a2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	4b31      	ldr	r3, [pc, #196]	@ (8002b04 <xPortStartScheduler+0x134>)
 8002a40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a42:	4b31      	ldr	r3, [pc, #196]	@ (8002b08 <xPortStartScheduler+0x138>)
 8002a44:	2207      	movs	r2, #7
 8002a46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a48:	e009      	b.n	8002a5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8002a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002b08 <xPortStartScheduler+0x138>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	4a2d      	ldr	r2, [pc, #180]	@ (8002b08 <xPortStartScheduler+0x138>)
 8002a52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a66:	2b80      	cmp	r3, #128	@ 0x80
 8002a68:	d0ef      	beq.n	8002a4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a6a:	4b27      	ldr	r3, [pc, #156]	@ (8002b08 <xPortStartScheduler+0x138>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f1c3 0307 	rsb	r3, r3, #7
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d00b      	beq.n	8002a8e <xPortStartScheduler+0xbe>
	__asm volatile
 8002a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a7a:	f383 8811 	msr	BASEPRI, r3
 8002a7e:	f3bf 8f6f 	isb	sy
 8002a82:	f3bf 8f4f 	dsb	sy
 8002a86:	60bb      	str	r3, [r7, #8]
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	e7fd      	b.n	8002a8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b08 <xPortStartScheduler+0x138>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	4a1c      	ldr	r2, [pc, #112]	@ (8002b08 <xPortStartScheduler+0x138>)
 8002a96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a98:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <xPortStartScheduler+0x138>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002aa0:	4a19      	ldr	r2, [pc, #100]	@ (8002b08 <xPortStartScheduler+0x138>)
 8002aa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002aac:	4b17      	ldr	r3, [pc, #92]	@ (8002b0c <xPortStartScheduler+0x13c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a16      	ldr	r2, [pc, #88]	@ (8002b0c <xPortStartScheduler+0x13c>)
 8002ab2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ab6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002ab8:	4b14      	ldr	r3, [pc, #80]	@ (8002b0c <xPortStartScheduler+0x13c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a13      	ldr	r2, [pc, #76]	@ (8002b0c <xPortStartScheduler+0x13c>)
 8002abe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002ac2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002ac4:	f000 f8da 	bl	8002c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002ac8:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <xPortStartScheduler+0x140>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002ace:	f000 f8f9 	bl	8002cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002ad2:	4b10      	ldr	r3, [pc, #64]	@ (8002b14 <xPortStartScheduler+0x144>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8002b14 <xPortStartScheduler+0x144>)
 8002ad8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002adc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002ade:	f7ff ff63 	bl	80029a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002ae2:	f7ff fd65 	bl	80025b0 <vTaskSwitchContext>
	prvTaskExitError();
 8002ae6:	f7ff ff1d 	bl	8002924 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	e000ed00 	.word	0xe000ed00
 8002af8:	410fc271 	.word	0x410fc271
 8002afc:	410fc270 	.word	0x410fc270
 8002b00:	e000e400 	.word	0xe000e400
 8002b04:	20001528 	.word	0x20001528
 8002b08:	2000152c 	.word	0x2000152c
 8002b0c:	e000ed20 	.word	0xe000ed20
 8002b10:	20000010 	.word	0x20000010
 8002b14:	e000ef34 	.word	0xe000ef34

08002b18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8002b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	607b      	str	r3, [r7, #4]
}
 8002b30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002b32:	4b10      	ldr	r3, [pc, #64]	@ (8002b74 <vPortEnterCritical+0x5c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3301      	adds	r3, #1
 8002b38:	4a0e      	ldr	r2, [pc, #56]	@ (8002b74 <vPortEnterCritical+0x5c>)
 8002b3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b74 <vPortEnterCritical+0x5c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d110      	bne.n	8002b66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b44:	4b0c      	ldr	r3, [pc, #48]	@ (8002b78 <vPortEnterCritical+0x60>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <vPortEnterCritical+0x4e>
	__asm volatile
 8002b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b52:	f383 8811 	msr	BASEPRI, r3
 8002b56:	f3bf 8f6f 	isb	sy
 8002b5a:	f3bf 8f4f 	dsb	sy
 8002b5e:	603b      	str	r3, [r7, #0]
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	e7fd      	b.n	8002b62 <vPortEnterCritical+0x4a>
	}
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000010 	.word	0x20000010
 8002b78:	e000ed04 	.word	0xe000ed04

08002b7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002b82:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <vPortExitCritical+0x50>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10b      	bne.n	8002ba2 <vPortExitCritical+0x26>
	__asm volatile
 8002b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	607b      	str	r3, [r7, #4]
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	e7fd      	b.n	8002b9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bcc <vPortExitCritical+0x50>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	4a08      	ldr	r2, [pc, #32]	@ (8002bcc <vPortExitCritical+0x50>)
 8002baa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002bac:	4b07      	ldr	r3, [pc, #28]	@ (8002bcc <vPortExitCritical+0x50>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d105      	bne.n	8002bc0 <vPortExitCritical+0x44>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002bbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	20000010 	.word	0x20000010

08002bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002bd0:	f3ef 8009 	mrs	r0, PSP
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	4b15      	ldr	r3, [pc, #84]	@ (8002c30 <pxCurrentTCBConst>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	f01e 0f10 	tst.w	lr, #16
 8002be0:	bf08      	it	eq
 8002be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bea:	6010      	str	r0, [r2, #0]
 8002bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002bf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002bf4:	f380 8811 	msr	BASEPRI, r0
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f7ff fcd6 	bl	80025b0 <vTaskSwitchContext>
 8002c04:	f04f 0000 	mov.w	r0, #0
 8002c08:	f380 8811 	msr	BASEPRI, r0
 8002c0c:	bc09      	pop	{r0, r3}
 8002c0e:	6819      	ldr	r1, [r3, #0]
 8002c10:	6808      	ldr	r0, [r1, #0]
 8002c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c16:	f01e 0f10 	tst.w	lr, #16
 8002c1a:	bf08      	it	eq
 8002c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002c20:	f380 8809 	msr	PSP, r0
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	f3af 8000 	nop.w

08002c30 <pxCurrentTCBConst>:
 8002c30:	20000088 	.word	0x20000088
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop

08002c38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8002c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c42:	f383 8811 	msr	BASEPRI, r3
 8002c46:	f3bf 8f6f 	isb	sy
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	607b      	str	r3, [r7, #4]
}
 8002c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002c52:	f7ff fbf3 	bl	800243c <xTaskIncrementTick>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c5c:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <xPortSysTickHandler+0x40>)
 8002c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	2300      	movs	r3, #0
 8002c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	f383 8811 	msr	BASEPRI, r3
}
 8002c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	e000ed04 	.word	0xe000ed04

08002c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c80:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <vPortSetupTimerInterrupt+0x34>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c86:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <vPortSetupTimerInterrupt+0x38>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb8 <vPortSetupTimerInterrupt+0x3c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0a      	ldr	r2, [pc, #40]	@ (8002cbc <vPortSetupTimerInterrupt+0x40>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	099b      	lsrs	r3, r3, #6
 8002c98:	4a09      	ldr	r2, [pc, #36]	@ (8002cc0 <vPortSetupTimerInterrupt+0x44>)
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c9e:	4b04      	ldr	r3, [pc, #16]	@ (8002cb0 <vPortSetupTimerInterrupt+0x34>)
 8002ca0:	2207      	movs	r2, #7
 8002ca2:	601a      	str	r2, [r3, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000e010 	.word	0xe000e010
 8002cb4:	e000e018 	.word	0xe000e018
 8002cb8:	20000004 	.word	0x20000004
 8002cbc:	10624dd3 	.word	0x10624dd3
 8002cc0:	e000e014 	.word	0xe000e014

08002cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002cd4 <vPortEnableVFP+0x10>
 8002cc8:	6801      	ldr	r1, [r0, #0]
 8002cca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002cce:	6001      	str	r1, [r0, #0]
 8002cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002cd2:	bf00      	nop
 8002cd4:	e000ed88 	.word	0xe000ed88

08002cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002cde:	f3ef 8305 	mrs	r3, IPSR
 8002ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b0f      	cmp	r3, #15
 8002ce8:	d915      	bls.n	8002d16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002cea:	4a18      	ldr	r2, [pc, #96]	@ (8002d4c <vPortValidateInterruptPriority+0x74>)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4413      	add	r3, r2
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002cf4:	4b16      	ldr	r3, [pc, #88]	@ (8002d50 <vPortValidateInterruptPriority+0x78>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	7afa      	ldrb	r2, [r7, #11]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d20b      	bcs.n	8002d16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8002cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	607b      	str	r3, [r7, #4]
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	e7fd      	b.n	8002d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002d16:	4b0f      	ldr	r3, [pc, #60]	@ (8002d54 <vPortValidateInterruptPriority+0x7c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d58 <vPortValidateInterruptPriority+0x80>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d90b      	bls.n	8002d3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8002d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d2a:	f383 8811 	msr	BASEPRI, r3
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	603b      	str	r3, [r7, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	e7fd      	b.n	8002d3a <vPortValidateInterruptPriority+0x62>
	}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000e3f0 	.word	0xe000e3f0
 8002d50:	20001528 	.word	0x20001528
 8002d54:	e000ed0c 	.word	0xe000ed0c
 8002d58:	2000152c 	.word	0x2000152c

08002d5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	@ 0x28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002d68:	f7ff fa9a 	bl	80022a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002d6c:	4b5c      	ldr	r3, [pc, #368]	@ (8002ee0 <pvPortMalloc+0x184>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002d74:	f000 f924 	bl	8002fc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002d78:	4b5a      	ldr	r3, [pc, #360]	@ (8002ee4 <pvPortMalloc+0x188>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f040 8095 	bne.w	8002eb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01e      	beq.n	8002dca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d015      	beq.n	8002dca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f023 0307 	bic.w	r3, r3, #7
 8002da4:	3308      	adds	r3, #8
 8002da6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00b      	beq.n	8002dca <pvPortMalloc+0x6e>
	__asm volatile
 8002db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	617b      	str	r3, [r7, #20]
}
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop
 8002dc8:	e7fd      	b.n	8002dc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d06f      	beq.n	8002eb0 <pvPortMalloc+0x154>
 8002dd0:	4b45      	ldr	r3, [pc, #276]	@ (8002ee8 <pvPortMalloc+0x18c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d86a      	bhi.n	8002eb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002dda:	4b44      	ldr	r3, [pc, #272]	@ (8002eec <pvPortMalloc+0x190>)
 8002ddc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002dde:	4b43      	ldr	r3, [pc, #268]	@ (8002eec <pvPortMalloc+0x190>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002de4:	e004      	b.n	8002df0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d903      	bls.n	8002e02 <pvPortMalloc+0xa6>
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f1      	bne.n	8002de6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002e02:	4b37      	ldr	r3, [pc, #220]	@ (8002ee0 <pvPortMalloc+0x184>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d051      	beq.n	8002eb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2208      	movs	r2, #8
 8002e12:	4413      	add	r3, r2
 8002e14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	1ad2      	subs	r2, r2, r3
 8002e26:	2308      	movs	r3, #8
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d920      	bls.n	8002e70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00b      	beq.n	8002e58 <pvPortMalloc+0xfc>
	__asm volatile
 8002e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e44:	f383 8811 	msr	BASEPRI, r3
 8002e48:	f3bf 8f6f 	isb	sy
 8002e4c:	f3bf 8f4f 	dsb	sy
 8002e50:	613b      	str	r3, [r7, #16]
}
 8002e52:	bf00      	nop
 8002e54:	bf00      	nop
 8002e56:	e7fd      	b.n	8002e54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	1ad2      	subs	r2, r2, r3
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002e6a:	69b8      	ldr	r0, [r7, #24]
 8002e6c:	f000 f90a 	bl	8003084 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002e70:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee8 <pvPortMalloc+0x18c>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee8 <pvPortMalloc+0x18c>)
 8002e7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee8 <pvPortMalloc+0x18c>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef0 <pvPortMalloc+0x194>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d203      	bcs.n	8002e92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002e8a:	4b17      	ldr	r3, [pc, #92]	@ (8002ee8 <pvPortMalloc+0x18c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a18      	ldr	r2, [pc, #96]	@ (8002ef0 <pvPortMalloc+0x194>)
 8002e90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	4b13      	ldr	r3, [pc, #76]	@ (8002ee4 <pvPortMalloc+0x188>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002ea6:	4b13      	ldr	r3, [pc, #76]	@ (8002ef4 <pvPortMalloc+0x198>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	4a11      	ldr	r2, [pc, #68]	@ (8002ef4 <pvPortMalloc+0x198>)
 8002eae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002eb0:	f7ff fa04 	bl	80022bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00b      	beq.n	8002ed6 <pvPortMalloc+0x17a>
	__asm volatile
 8002ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	60fb      	str	r3, [r7, #12]
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	e7fd      	b.n	8002ed2 <pvPortMalloc+0x176>
	return pvReturn;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3728      	adds	r7, #40	@ 0x28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20005538 	.word	0x20005538
 8002ee4:	2000554c 	.word	0x2000554c
 8002ee8:	2000553c 	.word	0x2000553c
 8002eec:	20005530 	.word	0x20005530
 8002ef0:	20005540 	.word	0x20005540
 8002ef4:	20005544 	.word	0x20005544

08002ef8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d04f      	beq.n	8002faa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002f0a:	2308      	movs	r3, #8
 8002f0c:	425b      	negs	r3, r3
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4413      	add	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	4b25      	ldr	r3, [pc, #148]	@ (8002fb4 <vPortFree+0xbc>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10b      	bne.n	8002f3e <vPortFree+0x46>
	__asm volatile
 8002f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2a:	f383 8811 	msr	BASEPRI, r3
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	60fb      	str	r3, [r7, #12]
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	e7fd      	b.n	8002f3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <vPortFree+0x66>
	__asm volatile
 8002f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f4a:	f383 8811 	msr	BASEPRI, r3
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	60bb      	str	r3, [r7, #8]
}
 8002f58:	bf00      	nop
 8002f5a:	bf00      	nop
 8002f5c:	e7fd      	b.n	8002f5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	4b14      	ldr	r3, [pc, #80]	@ (8002fb4 <vPortFree+0xbc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d01e      	beq.n	8002faa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d11a      	bne.n	8002faa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb4 <vPortFree+0xbc>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	401a      	ands	r2, r3
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002f84:	f7ff f98c 	bl	80022a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <vPortFree+0xc0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4413      	add	r3, r2
 8002f92:	4a09      	ldr	r2, [pc, #36]	@ (8002fb8 <vPortFree+0xc0>)
 8002f94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f96:	6938      	ldr	r0, [r7, #16]
 8002f98:	f000 f874 	bl	8003084 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002f9c:	4b07      	ldr	r3, [pc, #28]	@ (8002fbc <vPortFree+0xc4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	4a06      	ldr	r2, [pc, #24]	@ (8002fbc <vPortFree+0xc4>)
 8002fa4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002fa6:	f7ff f989 	bl	80022bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002faa:	bf00      	nop
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	2000554c 	.word	0x2000554c
 8002fb8:	2000553c 	.word	0x2000553c
 8002fbc:	20005548 	.word	0x20005548

08002fc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002fc6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002fca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002fcc:	4b27      	ldr	r3, [pc, #156]	@ (800306c <prvHeapInit+0xac>)
 8002fce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00c      	beq.n	8002ff4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3307      	adds	r3, #7
 8002fde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0307 	bic.w	r3, r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	4a1f      	ldr	r2, [pc, #124]	@ (800306c <prvHeapInit+0xac>)
 8002ff0:	4413      	add	r3, r2
 8002ff2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8003070 <prvHeapInit+0xb0>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8003070 <prvHeapInit+0xb0>)
 8003000:	2200      	movs	r2, #0
 8003002:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	4413      	add	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800300c:	2208      	movs	r2, #8
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0307 	bic.w	r3, r3, #7
 800301a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a15      	ldr	r2, [pc, #84]	@ (8003074 <prvHeapInit+0xb4>)
 8003020:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003022:	4b14      	ldr	r3, [pc, #80]	@ (8003074 <prvHeapInit+0xb4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2200      	movs	r2, #0
 8003028:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800302a:	4b12      	ldr	r3, [pc, #72]	@ (8003074 <prvHeapInit+0xb4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	1ad2      	subs	r2, r2, r3
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003040:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <prvHeapInit+0xb4>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4a0a      	ldr	r2, [pc, #40]	@ (8003078 <prvHeapInit+0xb8>)
 800304e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4a09      	ldr	r2, [pc, #36]	@ (800307c <prvHeapInit+0xbc>)
 8003056:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003058:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <prvHeapInit+0xc0>)
 800305a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800305e:	601a      	str	r2, [r3, #0]
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	20001530 	.word	0x20001530
 8003070:	20005530 	.word	0x20005530
 8003074:	20005538 	.word	0x20005538
 8003078:	20005540 	.word	0x20005540
 800307c:	2000553c 	.word	0x2000553c
 8003080:	2000554c 	.word	0x2000554c

08003084 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800308c:	4b28      	ldr	r3, [pc, #160]	@ (8003130 <prvInsertBlockIntoFreeList+0xac>)
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	e002      	b.n	8003098 <prvInsertBlockIntoFreeList+0x14>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d8f7      	bhi.n	8003092 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	4413      	add	r3, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d108      	bne.n	80030c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	441a      	add	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	441a      	add	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d118      	bne.n	800310c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4b15      	ldr	r3, [pc, #84]	@ (8003134 <prvInsertBlockIntoFreeList+0xb0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d00d      	beq.n	8003102 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	441a      	add	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	e008      	b.n	8003114 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003102:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <prvInsertBlockIntoFreeList+0xb0>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	e003      	b.n	8003114 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	429a      	cmp	r2, r3
 800311a:	d002      	beq.n	8003122 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003122:	bf00      	nop
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20005530 	.word	0x20005530
 8003134:	20005538 	.word	0x20005538

08003138 <freertos_shutdown_executive>:
#include <FreeRTOS.h>
#include <task.h>

int bsp_exit_code; //TODO: Cómo se hace estooo?

void freertos_shutdown_executive(int exit_code) {
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	__asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	60fb      	str	r3, [r7, #12]
}
 8003152:	bf00      	nop
    // 1. Desactivar interrupciones globales
    taskDISABLE_INTERRUPTS();

    // 2. Guardar el código de salida en una variable accesible por el BSP
    bsp_exit_code = exit_code;  // <-- define esta variable como global
 8003154:	4a02      	ldr	r2, [pc, #8]	@ (8003160 <freertos_shutdown_executive+0x28>)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6013      	str	r3, [r2, #0]

    //3?. xTaskNotifyGive(tarea principal de freertos)

    // 3. Detener el sistema (bucle infinito) o reiniciar
    for (;;) {
 800315a:	bf00      	nop
 800315c:	e7fd      	b.n	800315a <freertos_shutdown_executive+0x22>
 800315e:	bf00      	nop
 8003160:	20005550 	.word	0x20005550

08003164 <__termina_exec__reboot>:
        // BSP puede leer bsp_exit_code desde aquí si lo desea
    }
}

_Noreturn void __termina_exec__reboot() {
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0

   // rtems_shutdown_executive(1);
	freertos_shutdown_executive(1);
 8003168:	2001      	movs	r0, #1
 800316a:	f7ff ffe5 	bl	8003138 <freertos_shutdown_executive>

}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <__termina_shared_task__get_task>:
 * @param[in] task_id the task id.
 *
 * @return a pointer to the task object.
 */
static inline __termina_shared_task_t * __termina_shared_task__get_task(
        const __termina_id_t task_id) {
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
    
    return &__shared_app_task_object_table[task_id];
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4a04      	ldr	r2, [pc, #16]	@ (8003198 <__termina_shared_task__get_task+0x24>)
 8003188:	4413      	add	r3, r2

}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	2000555c 	.word	0x2000555c

0800319c <priority_termina2freertos>:
#define OS_FREERTOS_INCLUDE_TERMINA_OS_FREERTOS_PRIORITY_H_

#include <termina.h>
#include <FreeRTOS.h>

UBaseType_t priority_termina2freertos(__termina_task_prio_t priority){
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	71fb      	strb	r3, [r7, #7]

	UBaseType_t freertos_priority = 255-priority;
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80031ac:	60fb      	str	r3, [r7, #12]
	return freertos_priority;
 80031ae:	68fb      	ldr	r3, [r7, #12]

}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <__freertos_task__get_task>:

} __freertos_task_t;

__freertos_task_t __freertos_task_object_table[__TERMINA_APP_CONFIG_TASKS];

static inline __freertos_task_t * __freertos_task__get_task(const __termina_id_t task_id) {
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
    return &__freertos_task_object_table[task_id];
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4a03      	ldr	r2, [pc, #12]	@ (80031d8 <__freertos_task__get_task+0x1c>)
 80031ca:	4413      	add	r3, r2
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	20005554 	.word	0x20005554

080031dc <__freertos_task__entry>:
 * \brief Array used to generate the names of the tasks that are
 *        created.
 */
static int8_t ntask_name[5]  = "0000";

static void __freertos_task__entry (void * arg) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

    __termina_id_t * task_id = (__termina_id_t *)arg;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	60fb      	str	r3, [r7, #12]

    __termina_shared_task_t * task = __termina_shared_task__get_task(*task_id);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ffc1 	bl	8003174 <__termina_shared_task__get_task>
 80031f2:	60b8      	str	r0, [r7, #8]

    // This function call shall never return
    task->entry(task->arg);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	6912      	ldr	r2, [r2, #16]
 80031fc:	4610      	mov	r0, r2
 80031fe:	4798      	blx	r3

    return;
 8003200:	bf00      	nop

}
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <__termina_os_task__init>:

void __termina_os_task__init(const __termina_id_t task_id,
                             int32_t * const status) {
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af02      	add	r7, sp, #8
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]

    *status = 0;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

    __termina_shared_task_t * task = __termina_shared_task__get_task(task_id);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ffab 	bl	8003174 <__termina_shared_task__get_task>
 800321e:	6178      	str	r0, [r7, #20]
    __freertos_task_t * freertos_task = __freertos_task__get_task(task_id);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff ffcb 	bl	80031bc <__freertos_task__get_task>
 8003226:	6138      	str	r0, [r7, #16]
                                            
    NEXT_OBJECT_NAME(ntask_name[0], ntask_name[1], ntask_name[2],
 8003228:	4b36      	ldr	r3, [pc, #216]	@ (8003304 <__termina_os_task__init+0xfc>)
 800322a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800322e:	2b39      	cmp	r3, #57	@ 0x39
 8003230:	d138      	bne.n	80032a4 <__termina_os_task__init+0x9c>
 8003232:	4b34      	ldr	r3, [pc, #208]	@ (8003304 <__termina_os_task__init+0xfc>)
 8003234:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003238:	2b39      	cmp	r3, #57	@ 0x39
 800323a:	d126      	bne.n	800328a <__termina_os_task__init+0x82>
 800323c:	4b31      	ldr	r3, [pc, #196]	@ (8003304 <__termina_os_task__init+0xfc>)
 800323e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003242:	2b7a      	cmp	r3, #122	@ 0x7a
 8003244:	d114      	bne.n	8003270 <__termina_os_task__init+0x68>
 8003246:	4b2f      	ldr	r3, [pc, #188]	@ (8003304 <__termina_os_task__init+0xfc>)
 8003248:	f993 3000 	ldrsb.w	r3, [r3]
 800324c:	2b7a      	cmp	r3, #122	@ 0x7a
 800324e:	d102      	bne.n	8003256 <__termina_os_task__init+0x4e>
 8003250:	2001      	movs	r0, #1
 8003252:	f7ff ff87 	bl	8003164 <__termina_exec__reboot>
 8003256:	4b2b      	ldr	r3, [pc, #172]	@ (8003304 <__termina_os_task__init+0xfc>)
 8003258:	f993 3000 	ldrsb.w	r3, [r3]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	3301      	adds	r3, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	b25a      	sxtb	r2, r3
 8003264:	4b27      	ldr	r3, [pc, #156]	@ (8003304 <__termina_os_task__init+0xfc>)
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	4b26      	ldr	r3, [pc, #152]	@ (8003304 <__termina_os_task__init+0xfc>)
 800326a:	2261      	movs	r2, #97	@ 0x61
 800326c:	705a      	strb	r2, [r3, #1]
 800326e:	e008      	b.n	8003282 <__termina_os_task__init+0x7a>
 8003270:	4b24      	ldr	r3, [pc, #144]	@ (8003304 <__termina_os_task__init+0xfc>)
 8003272:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	3301      	adds	r3, #1
 800327a:	b2db      	uxtb	r3, r3
 800327c:	b25a      	sxtb	r2, r3
 800327e:	4b21      	ldr	r3, [pc, #132]	@ (8003304 <__termina_os_task__init+0xfc>)
 8003280:	705a      	strb	r2, [r3, #1]
 8003282:	4b20      	ldr	r3, [pc, #128]	@ (8003304 <__termina_os_task__init+0xfc>)
 8003284:	2230      	movs	r2, #48	@ 0x30
 8003286:	709a      	strb	r2, [r3, #2]
 8003288:	e008      	b.n	800329c <__termina_os_task__init+0x94>
 800328a:	4b1e      	ldr	r3, [pc, #120]	@ (8003304 <__termina_os_task__init+0xfc>)
 800328c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	3301      	adds	r3, #1
 8003294:	b2db      	uxtb	r3, r3
 8003296:	b25a      	sxtb	r2, r3
 8003298:	4b1a      	ldr	r3, [pc, #104]	@ (8003304 <__termina_os_task__init+0xfc>)
 800329a:	709a      	strb	r2, [r3, #2]
 800329c:	4b19      	ldr	r3, [pc, #100]	@ (8003304 <__termina_os_task__init+0xfc>)
 800329e:	2230      	movs	r2, #48	@ 0x30
 80032a0:	70da      	strb	r2, [r3, #3]
 80032a2:	e008      	b.n	80032b6 <__termina_os_task__init+0xae>
 80032a4:	4b17      	ldr	r3, [pc, #92]	@ (8003304 <__termina_os_task__init+0xfc>)
 80032a6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	3301      	adds	r3, #1
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	b25a      	sxtb	r2, r3
 80032b2:	4b14      	ldr	r3, [pc, #80]	@ (8003304 <__termina_os_task__init+0xfc>)
 80032b4:	70da      	strb	r2, [r3, #3]
            ntask_name[3]);
    ntask_name[4] = '\0'; // TODO: Comprobar que esto hace que el nombre sea válido (CREO QUE NO HACE FALTA)
 80032b6:	4b13      	ldr	r3, [pc, #76]	@ (8003304 <__termina_os_task__init+0xfc>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	711a      	strb	r2, [r3, #4]
    const char * const pcName = (const char *)ntask_name; //
 80032bc:	4b11      	ldr	r3, [pc, #68]	@ (8003304 <__termina_os_task__init+0xfc>)
 80032be:	60fb      	str	r3, [r7, #12]
        //const char name;

    UBaseType_t task_priority = priority_termina2freertos(task->priority);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	791b      	ldrb	r3, [r3, #4]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff69 	bl	800319c <priority_termina2freertos>
 80032ca:	60b8      	str	r0, [r7, #8]

    if (xTaskCreate(__freertos_task__entry,pcName,
        task->stack_size /sizeof(StackType_t), // TODO: Comprobar que se traduce bien de bytes a palabra
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	089b      	lsrs	r3, r3, #2
    if (xTaskCreate(__freertos_task__entry,pcName,
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	6919      	ldr	r1, [r3, #16]
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	460b      	mov	r3, r1
 80032e2:	68f9      	ldr	r1, [r7, #12]
 80032e4:	4808      	ldr	r0, [pc, #32]	@ (8003308 <__termina_os_task__init+0x100>)
 80032e6:	f7fe fe1b 	bl	8001f20 <xTaskCreate>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d004      	beq.n	80032fa <__termina_os_task__init+0xf2>
		task->arg,task_priority,
        &freertos_task->freertos_task_id) != pdPASS) {
        
        *status = -1;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	f04f 32ff 	mov.w	r2, #4294967295
 80032f6:	601a      	str	r2, [r3, #0]
    /*The size of the task stack specified as the number of
 * variables the stack can hold - not the number of bytes.  For example, if
 * the stack is 16 bits wide and uxStackDepth is defined as 100, 200 bytes
 * will be allocated for stack storage.*/

    return;
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop
}
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000014 	.word	0x20000014
 8003308:	080031dd 	.word	0x080031dd

0800330c <__termina_shared_task__get_task>:
        const __termina_id_t task_id) {
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
    return &__shared_app_task_object_table[task_id];
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4a04      	ldr	r2, [pc, #16]	@ (8003330 <__termina_shared_task__get_task+0x24>)
 8003320:	4413      	add	r3, r2
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	2000555c 	.word	0x2000555c

08003334 <__termina_task__init>:
void __termina_task__init(const __termina_id_t task_id,
                          __termina_task_prio_t priority,
                          size_t stack_size,
                          __termina_task_entry_t entry,
                          void * arg,
                          int32_t * const status) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	460b      	mov	r3, r1
 8003342:	72fb      	strb	r3, [r7, #11]

    *status = 0;
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]

    if (task_id >= __TERMINA_APP_CONFIG_TASKS) {
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d903      	bls.n	8003358 <__termina_task__init+0x24>

        *status = -1;
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	f04f 32ff 	mov.w	r2, #4294967295
 8003356:	601a      	str	r2, [r3, #0]

    }

    if (0 == *status) {
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d117      	bne.n	8003390 <__termina_task__init+0x5c>

        __termina_shared_task_t * task = __termina_shared_task__get_task(task_id);
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f7ff ffd3 	bl	800330c <__termina_shared_task__get_task>
 8003366:	6178      	str	r0, [r7, #20]

        task->task_id = task_id;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	601a      	str	r2, [r3, #0]
        task->priority = priority;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	7afa      	ldrb	r2, [r7, #11]
 8003372:	711a      	strb	r2, [r3, #4]
        task->stack_size = stack_size;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	609a      	str	r2, [r3, #8]
        task->entry = entry;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	60da      	str	r2, [r3, #12]
        task->arg = arg;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	6a3a      	ldr	r2, [r7, #32]
 8003384:	611a      	str	r2, [r3, #16]

        __termina_os_task__init(task_id, status);
 8003386:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f7ff ff3d 	bl	8003208 <__termina_os_task__init>

    }

    return;
 800338e:	bf00      	nop
 8003390:	bf00      	nop

}
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <memset>:
 8003398:	4402      	add	r2, r0
 800339a:	4603      	mov	r3, r0
 800339c:	4293      	cmp	r3, r2
 800339e:	d100      	bne.n	80033a2 <memset+0xa>
 80033a0:	4770      	bx	lr
 80033a2:	f803 1b01 	strb.w	r1, [r3], #1
 80033a6:	e7f9      	b.n	800339c <memset+0x4>

080033a8 <__libc_init_array>:
 80033a8:	b570      	push	{r4, r5, r6, lr}
 80033aa:	4d0d      	ldr	r5, [pc, #52]	@ (80033e0 <__libc_init_array+0x38>)
 80033ac:	4c0d      	ldr	r4, [pc, #52]	@ (80033e4 <__libc_init_array+0x3c>)
 80033ae:	1b64      	subs	r4, r4, r5
 80033b0:	10a4      	asrs	r4, r4, #2
 80033b2:	2600      	movs	r6, #0
 80033b4:	42a6      	cmp	r6, r4
 80033b6:	d109      	bne.n	80033cc <__libc_init_array+0x24>
 80033b8:	4d0b      	ldr	r5, [pc, #44]	@ (80033e8 <__libc_init_array+0x40>)
 80033ba:	4c0c      	ldr	r4, [pc, #48]	@ (80033ec <__libc_init_array+0x44>)
 80033bc:	f000 f818 	bl	80033f0 <_init>
 80033c0:	1b64      	subs	r4, r4, r5
 80033c2:	10a4      	asrs	r4, r4, #2
 80033c4:	2600      	movs	r6, #0
 80033c6:	42a6      	cmp	r6, r4
 80033c8:	d105      	bne.n	80033d6 <__libc_init_array+0x2e>
 80033ca:	bd70      	pop	{r4, r5, r6, pc}
 80033cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d0:	4798      	blx	r3
 80033d2:	3601      	adds	r6, #1
 80033d4:	e7ee      	b.n	80033b4 <__libc_init_array+0xc>
 80033d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80033da:	4798      	blx	r3
 80033dc:	3601      	adds	r6, #1
 80033de:	e7f2      	b.n	80033c6 <__libc_init_array+0x1e>
 80033e0:	08003458 	.word	0x08003458
 80033e4:	08003458 	.word	0x08003458
 80033e8:	08003458 	.word	0x08003458
 80033ec:	0800345c 	.word	0x0800345c

080033f0 <_init>:
 80033f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f2:	bf00      	nop
 80033f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f6:	bc08      	pop	{r3}
 80033f8:	469e      	mov	lr, r3
 80033fa:	4770      	bx	lr

080033fc <_fini>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	bf00      	nop
 8003400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003402:	bc08      	pop	{r3}
 8003404:	469e      	mov	lr, r3
 8003406:	4770      	bx	lr
